{"version":3,"file":"functions.js","sources":["../src/utils.ts","../src/center.ts","../src/colorspace.ts","../src/dedup.ts","../src/dequantize.ts","../src/inspect.ts","../src/instance.ts","../src/metal-rough.ts","../src/prune.ts","../src/partition.ts","../src/quantize.ts","../src/resample.ts","../src/reorder.ts","../src/sequence.ts","../src/tangents.ts","../src/texture-resize.ts","../src/unweld.ts","../src/weld.ts"],"sourcesContent":["import { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Primitive, Texture, Transform, TransformContext } from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/** Maps pixels from source to target textures, with a per-pixel callback. */\nexport async function rewriteTexture(\n\t\tsource: Texture,\n\t\ttarget: Texture,\n\t\tfn: (pixels: NdArray, i: number, j: number) => void): Promise<Texture|null> {\n\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor(let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor(let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 2\n\t\t\t\t: position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 3\n\t\t\t\t: position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n","import { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { bounds } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = {pivot: 'center'};\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center (_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = {...CENTER_DEFAULTS, ..._options} as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot().listScenes().forEach((scene, index) => {\n\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\tlet pivot: vec3;\n\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\tconst bbox = bounds(scene);\n\t\t\t\tpivot = [\n\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t];\n\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t} else {\n\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\tif (isAnimated) {\n\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\tscene.addChild(offsetNode);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\tchild.setTranslation([\n\t\t\t\t\t\tt[0] + offset[0],\n\t\t\t\t\t\tt[1] + offset[1],\n\t\t\t\t\t\tt[2] + offset[2],\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n","import { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'colorspace';\n\n/** Options for the {@link colorspace} function. */\nexport interface ColorspaceOptions {\n\t/** Must be `\"sRGB\"`. Required. */\n    inputEncoding: string;\n}\n\n/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored\n * as linear values, and this function provides a way to correct vertex colors that are\n * (incorrectly) sRGB.\n */\nexport function colorspace (options: ColorspaceOptions): Transform {\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.inputEncoding === 'linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.inputEncoding !== 'sRGB') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input encoding \"${options.inputEncoding}\" – should be \"sRGB\" or `\n\t\t\t\t+ '\"linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear( c: number ): number {\n\n\t\t\treturn ( c < 0.04045 )\n\t\t\t\t? c * 0.0773993808\n\t\t\t\t: Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n};\n","import { Accessor, BufferUtils, Document, Logger, Material, Mesh, Primitive, PrimitiveTarget, PropertyType, Root, Texture, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = {...DEDUP_DEFAULTS, ..._options} as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(logger, doc);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction dedupAccessors(logger: Logger, doc: Document): void {\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\tconst inputAccessors: Set<Accessor> = new Set();\n\tconst outputAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = doc.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => (attributeAccessors.add(accessor)));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input) inputAccessors.add(input);\n\t\t\tif (output) outputAccessors.add(output);\n\t\t}\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = 0; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (a === b) continue;\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`\n\t);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}`\n\t\t+ ' attributes.'\n\t);\n\n\tconst duplicateInputs = detectDuplicates(Array.from(inputAccessors));\n\tconst duplicateOutputs = detectDuplicates(Array.from(outputAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateInputs.size + duplicateOutputs.size} duplicates among`\n\t\t+ ` ${inputAccessors.size + outputAccessors.size} animation accessors.`\n\t);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicateInputs.has(input)) {\n\t\t\t\tsampler.swap(input, duplicateInputs.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicateOutputs.has(output)) {\n\t\t\t\tsampler.swap(output, duplicateOutputs.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\tArray.from(duplicateInputs.keys()).forEach((input) => input.dispose());\n\tArray.from(duplicateOutputs.keys()).forEach((output) => output.dispose());\n}\n\nfunction dedupMeshes(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor|Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`\n\t);\n}\n\nfunction dedupImages(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates: Map<Material, Material> = new Map();\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++){\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < materials.length; j++){\n\t\t\tconst b = materials[j];\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t// eslint-disable-next-line max-len\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listMaterials().length} materials.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(\n\tprim: Primitive | PrimitiveTarget,\n\trefs: Map<Accessor|Material, number>\n): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n","import { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link MeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = {...DEQUANTIZE_DEFAULTS, ..._options} as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(MeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import { Accessor, Document, ExtensionProperty, GLTF, ImageUtils, Texture, TypedArray, bounds } from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect (doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes (doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc.getRoot().listScenes().map((scene) => {\n\t\tconst root = scene.listChildren()[0];\n\t\tconst sceneBounds = bounds(scene);\n\t\treturn {\n\t\t\tname: scene.getName(),\n\t\t\trootName: root ? root.getName() : '',\n\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t};\n\t});\n\treturn {properties: scenes};\n}\n\n/** List meshes. */\nfunction listMeshes (doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc.getRoot().listMeshes().map((mesh) => {\n\t\tconst instances = mesh.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\t\tlet glPrimitives = 0;\n\t\tlet verts = 0;\n\t\tconst semantics = new Set<string>();\n\t\tconst meshIndices = new Set<string>();\n\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\tsemantics.add(semantic + ':' + arrayToType(attr.getArray()!));\n\t\t\t\tmeshAccessors.add(attr);\n\t\t\t}\n\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t}\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (indices) {\n\t\t\t\tmeshIndices.add(arrayToType(indices.getArray()!));\n\t\t\t\tmeshAccessors.add(indices);\n\t\t\t}\n\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t});\n\n\t\tlet size = 0;\n\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\tconst modes = mesh.listPrimitives()\n\t\t\t.map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\treturn {\n\t\t\tname: mesh.getName(),\n\t\t\tmode: Array.from(new Set(modes)),\n\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\tglPrimitives: glPrimitives,\n\t\t\tvertices: verts,\n\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\tinstances: instances,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: meshes};\n}\n\n/** List materials. */\nfunction listMaterials (doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc.getRoot().listMaterials().map((material) => {\n\t\tconst instances = material.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\t// Find all texture slots attached to this material or its extensions.\n\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\tconst slots = doc.getGraph().listEdges()\n\t\t\t.filter((ref) => {\n\t\t\t\tconst child = ref.getChild();\n\t\t\t\tconst parent = ref.getParent();\n\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (child instanceof Texture\n\t\t\t\t\t\t&& parent instanceof ExtensionProperty\n\t\t\t\t\t\t&& extensions.has(parent)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t.map((ref) => ref.getName());\n\n\t\treturn {\n\t\t\tname: material.getName(),\n\t\t\tinstances,\n\t\t\ttextures: slots,\n\t\t\talphaMode: material.getAlphaMode(),\n\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t};\n\t});\n\n\treturn {properties: materials};\n}\n\n/** List textures. */\nfunction listTextures (doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc.getRoot().listTextures().map((texture) => {\n\t\tconst instances = texture.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\tconst slots = doc.getGraph().listParentEdges(texture)\n\t\t\t.map((edge) => edge.getName())\n\t\t\t.filter((name) => name !== 'texture');\n\n\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\treturn {\n\t\t\tname: texture.getName(),\n\t\t\turi: texture.getURI(),\n\t\t\tslots: Array.from(new Set(slots)),\n\t\t\tinstances,\n\t\t\tmimeType: texture.getMimeType(),\n\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\tgpuSize: ImageUtils.getMemSize(texture.getImage()!, texture.getMimeType()),\n\t\t};\n\t});\n\n\treturn {properties: textures};\n}\n\n/** List animations. */\nfunction listAnimations (doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc.getRoot().listAnimations().map((anim) => {\n\t\tlet minTime = Infinity;\n\t\tlet maxTime = -Infinity;\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tif (!input) return;\n\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t});\n\n\t\tlet size = 0;\n\t\tlet keyframes = 0;\n\t\tconst accessors: Set<Accessor> = new Set();\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (!input) return;\n\t\t\tkeyframes += input.getCount();\n\t\t\taccessors.add(input);\n\t\t\tif (!output) return;\n\t\t\taccessors.add(output);\n\t\t});\n\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t});\n\n\t\treturn {\n\t\t\tname: anim.getName(),\n\t\t\tchannels: anim.listChannels().length,\n\t\t\tsamplers: anim.listSamplers().length,\n\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\tkeyframes: keyframes,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: animations};\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction arrayToType(array: TypedArray): string {\n\treturn array.constructor.name.replace('Array', '').toLowerCase();\n}\n","import { Document, Logger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, MeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'instance';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InstanceOptions {}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No\n * options are currently implemented for this function.\n */\nexport function instance (_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...INSTANCE_DEFAULTS, ..._options} as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(MeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tthrow new Error(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < 2) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode()\n\t\t\t\t\t.setMesh(mesh)\n\t\t\t\t\t.setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, t = node.getWorldTranslation());\n\t\t\t\t\tbatchRotation.setElement(i, r = node.getWorldRotation());\n\t\t\t\t\tbatchScale.setElement(i, s = node.getWorldScale());\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(\n\t\t\t\t`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`\n\t\t\t);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with multiple parent nodes were found.`);\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: Logger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (node.listChildren().length\n\t\t\t\t|| node.getCamera()\n\t\t\t\t|| node.getMesh()\n\t\t\t\t|| node.getSkin()\n\t\t\t\t|| node.listExtensions().length) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParent();\n\t\tif (nodeParent instanceof Node) {\n\t\t\tnodes.push(nodeParent);\n\t\t}\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(\n\t\tdoc: Document,\n\t\tbatchExtension: MeshGPUInstancing,\n\t\tmesh: Mesh,\n\t\tcount: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Texture, Transform } from '@gltf-transform/core';\nimport { MaterialsIOR, MaterialsPBRSpecularGlossiness, MaterialsSpecular, PBRSpecularGlossiness } from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough (_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...METALROUGH_DEFAULTS, ..._options} as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc.getRoot().listExtensionsUsed().map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(MaterialsIOR);\n\t\tconst specExtension = doc.createExtension(MaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(MaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material\n\t\t\t\t.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { AnimationChannel, Document, Graph, Property, PropertyType, Root, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t]\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...PRUNE_DEFAULTS, ..._options} as Required<PruneOptions>;\n\tconst propertyTypes = options.propertyTypes;\n\n\treturn createTransform(NAME, (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\tif (propertyTypes.includes(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.includes(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.includes(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed).map((t) => `${t} (${disposed[t]})`).join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents()\n\t\t\t\t.filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\n\t});\n\n};\n","import { Document, Logger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> =  {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\n\tconst options = {...PARTITION_DEFAULTS, ..._options} as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.BUFFER]}));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction partitionMeshes (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives()\n\t\t\t\t.forEach((primitive) => {\n\t\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\t\tprimitive.listAttributes()\n\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\tprimitive.listTargets()\n\t\t\t\t\t\t.forEach((primTarget) => {\n\t\t\t\t\t\t\tprimTarget.listAttributes()\n\t\t\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers()\n\t\t\t\t.forEach((sampler) => {\n\t\t\t\t\tconst input = sampler.getInput();\n\t\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI (basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tLogger,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(MeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (prim.getAttribute('WEIGHTS_0')) {\n\t\tnormalizeWeights(prim);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (parent instanceof Node) {\n\t\t\tconst animChannels = parent\n\t\t\t\t.listParents()\n\t\t\t\t.filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\t\tif (parent.getSkin()) {\n\t\t\t\tparent.setSkin(transformSkin(parent.getSkin()!, nodeTransform));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet targetNode: Node;\n\t\t\tif (isParentNode || isAnimated) {\n\t\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\t\tanimChannels\n\t\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t\t} else {\n\t\t\t\ttargetNode = parent;\n\t\t\t}\n\n\t\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\t\ttargetNode.setMatrix(nodeMatrix);\n\t\t}\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone();\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(true);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: Logger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nfunction normalizeWeights(prim: Primitive | PrimitiveTarget): void {\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst weightsEl: number[] = [];\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tlet vertexWeightsSum = 0;\n\n\t\tlet leastWeight = Infinity;\n\t\tlet leastIndex = -1;\n\t\tlet leastAttribute: Accessor | null = null;\n\n\t\tlet weights: Accessor | null;\n\t\tlet attributeIndex = 0;\n\n\t\t// Find sum of weights and the joint with the lowest non-zero weight.\n\t\twhile ((weights = prim.getAttribute(`WEIGHTS_${attributeIndex++}`))) {\n\t\t\tweights.getElement(i, weightsEl);\n\t\t\tfor (let j = 0; j < weightsEl.length; j++) {\n\t\t\t\tvertexWeightsSum += weightsEl[j];\n\t\t\t\tif (weightsEl[j] > 0 && weightsEl[j] < leastWeight) {\n\t\t\t\t\tleastAttribute = weights;\n\t\t\t\t\tleastWeight = weightsEl[j];\n\t\t\t\t\tleastIndex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Normalize by updating least-significant joint weight.\n\t\tif (leastAttribute && vertexWeightsSum !== 1) {\n\t\t\tleastAttribute.getElement(i, weightsEl);\n\t\t\tweightsEl[leastIndex] += 1 - vertexWeightsSum;\n\t\t\tleastAttribute.setElement(i, weightsEl);\n\t\t}\n\t}\n}\n\nexport { quantize };\n","import { Accessor, AnimationSampler, Document, Root, Transform, TransformContext } from '@gltf-transform/core';\nimport { createTransform, isTransformPending } from './utils';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {tolerance?: number}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> =  {tolerance: 1e-4};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\n\tconst options = {...RESAMPLE_DEFAULTS, ..._options} as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, (doc: Document, context?: TransformContext): void => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst accessorsCountPrev = doc.getRoot().listAccessors().length;\n\t\tconst logger = doc.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst morphTargetSamplers = new Set<AnimationSampler>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tif (channel.getSampler() && channel.getTargetPath() === 'weights') {\n\t\t\t\t\tmorphTargetSamplers.add(channel.getSampler()!);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (morphTargetSamplers.has(sampler)) {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP'\n\t\t\t\t\t|| sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\tif (doc.getRoot().listAccessors().length > accessorsCountPrev && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tlogger.warn(\n\t\t\t\t`${NAME}: Resampling required copying accessors, some of which may be duplicates.`\n\t\t\t\t+ ' Consider using \"dedup\" to consolidate any duplicates.'\n\t\t\t);\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction optimize (sampler: AnimationSampler, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone();\n\tconst output = sampler.getOutput()!.clone();\n\n\tconst tolerance = options.tolerance as number;\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++ i) {\n\t\tconst time = input.getScalar(i);\n\t\tconst timePrev = input.getScalar(i - 1);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst timeMix = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\tfor (let j = 0; j < output.getElementSize(); j++) {\n\t\t\t\tconst value = output.getElement(i, tmp)[j];\n\t\t\t\tconst valuePrev = output.getElement(i - 1, tmp)[j];\n\t\t\t\tconst valueNext = output.getElement(i + 1, tmp)[j];\n\n\t\t\t\tif (sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\t// Prune keyframes that are colinear with prev/next keyframes.\n\t\t\t\t\tif (Math.abs(value - lerp(valuePrev, valueNext, timeMix)) > tolerance) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (sampler.getInterpolation() === 'STEP') {\n\t\t\t\t\t// Prune keyframes that are identical to prev/next keyframes.\n\t\t\t\t\tif (value !== valuePrev || value !== valueNext) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp (v0: number, v1: number, t: number): number {\n    return v0 * (1 - t) + v1 * t;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform, SetMap } from './utils';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder?: typeof MeshoptEncoder,\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance',\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder (_options: ReorderOptions = REORDER_DEFAULTS): Transform {\n\tconst options = {...REORDER_DEFAULTS, ..._options} as Required<ReorderOptions>;\n\tconst encoder = options.encoder;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = preprocessPrimitives(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.ACCESSOR]}));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/**\n * Constructs a plan for creating optimal vertex cache order, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nfunction preprocessPrimitives(doc: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of listAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {indicesToAttributes, indicesToMode, attributesToPrimitives};\n}\n\nfunction listAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { Accessor, Document, Logger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array,\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean,\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents (_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = {...TANGENTS_DEFAULTS, ..._options} as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor()\n\t\t\t\t\t.setBuffer(tangentBuffer)\n\t\t\t\t\t.setArray(tangentArray)\n\t\t\t\t\t.setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(\n\t\tprim: Primitive,\n\t\tlogger: Logger,\n\t\tmeshName: string,\n\t\ti: number,\n\t\toverwrite: boolean): boolean {\n\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES\n\t\t\t|| !prim.getAttribute('POSITION')\n\t\t\t|| !prim.getAttribute('NORMAL')\n\t\t\t|| !prim.getAttribute('TEXCOORD_0')) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' be unwelded.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = {...TEXTURE_RESIZE_DEFAULTS, ..._options} as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern\n\t\t\t\t|| options.pattern.test(name)\n\t\t\t\t|| options.pattern.test(uri);\n\t\t\tif (!match) continue;\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`Skipping unsupported texture type, \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping \"${uri || name}\", within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = await getPixels(srcImage, texture.getMimeType());\n\t\t\tconst dstPixels = ndarray(\n\t\t\t\tnew Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]\n\t\t\t);\n\n\t\t\tlogger.debug(\n\t\t\t\t`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { Accessor, Document, Logger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld (_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...UNWELD_DEFAULTS, ..._options} as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(\n\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(\n\t\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\t\tsrcAttribute: Accessor,\n\t\tindices: Accessor,\n\t\tlogger: Logger,\n\t\tvisited: Map<Accessor, Map<Accessor, Accessor>>): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as\n\t\tnew (len: number) => TypedArray;\n\tdstAttribute.setArray(\n\t\tnew ArrayCtor(indices.getCount() * srcAttribute.getElementSize())\n\t);\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import { Accessor, Document, Primitive, PrimitiveTarget, Transform, TypedArray } from '@gltf-transform/core';\nimport { getGLPrimitiveCount, createTransform } from './utils';\n\nconst NAME = 'weld';\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Per-attribute tolerance used when merging similar vertices. */\n\ttolerance?: number\n}\n\nconst WELD_DEFAULTS: Required<WeldOptions> = {tolerance: 1e-4};\n\n/**\n * Index {@link Primitive}s and (optionally) merge similar vertices.\n */\nexport function weld (_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = {...WELD_DEFAULTS, ..._options} as Required<WeldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (options.tolerance === 0) {\n\t\t\t\t\tweldOnly(doc, prim);\n\t\t\t\t} else {\n\t\t\t\t\tweldAndMerge(doc, prim, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**  In-place weld, adds indices without changing number of vertices. */\nfunction weldOnly (doc: Document, prim: Primitive): void {\n\tif (prim.getIndices()) return;\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indicesArray = numVertices <= 65534\n\t\t? new Uint16Array(getGLPrimitiveCount(prim) * 3)\n\t\t: new Uint32Array(getGLPrimitiveCount(prim) * 3);\n\tconst indices = doc.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(indicesArray);\n\tfor (let i = 0; i < indices.getCount(); i++) indices.setScalar(i, i);\n\tprim.setIndices(indices);\n}\n\n/**\n * Weld and merge, combining vertices that are similar on all vertex attributes. Morph target\n * attributes are not considered when scoring vertex similarity, but are retained when merging.\n */\nfunction weldAndMerge (doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst tolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst decimalShift = Math.log10(1 / tolerance);\n\tconst shiftFactor = Math.pow(10, decimalShift);\n\n\tconst hashToIndex: {[key: string]: number} = {};\n\tconst srcIndices = prim.getIndices();\n\tconst vertexCount = srcIndices\n\t\t? srcIndices.getCount()\n\t\t: prim.listAttributes()[0].getCount();\n\n\t// Prepare storage for new elements of each attribute.\n\tconst dstAttributes = new Map<Accessor, number[][]>();\n\tprim.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\tprim.listTargets().forEach((target) => {\n\t\ttarget.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\t});\n\n\tconst dstIndicesArray = [];\n\tlet nextIndex = 0;\n\n\t// For each vertex, compute a hash based on its tolerance and merge with any sufficiently\n\t// similar vertices.\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tconst index = srcIndices ? srcIndices.getScalar(i) : i;\n\n\t\tconst hashElements: number[] = [];\n\t\tconst el: number[] = [];\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tfor (let j = 0; j < attribute.getElementSize(); j++) {\n\t\t\t\thashElements.push(~ ~ (attribute.getElement(index, el)[j] * shiftFactor));\n\t\t\t}\n\t\t}\n\n\t\tconst hash = hashElements.join('|');\n\t\tif (hash in hashToIndex) {\n\t\t\tdstIndicesArray.push(hashToIndex[hash]);\n\t\t} else {\n\t\t\tfor (const attr of prim.listAttributes()) {\n\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t}\n\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\tfor (const attr of target.listAttributes()) {\n\t\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thashToIndex[hash] = nextIndex;\n\t\t\tdstIndicesArray.push(nextIndex);\n\t\t\tnextIndex++;\n\t\t}\n\t}\n\n\tconst srcVertexCount = prim.listAttributes()[0].getCount();\n\tconst dstVertexCount = dstAttributes.get(prim.getAttribute('POSITION')!)!.length;\n\tdoc.getLogger().debug(`${NAME}: ${srcVertexCount} → ${dstVertexCount} vertices.`);\n\n\t// Update the primitive.\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t// Clean up.\n\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t\t// Clean up.\n\t\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t\t}\n\t}\n\tif (srcIndices) {\n\t\tconst dstIndicesTypedArray\n\t\t\t= createArrayOfType(srcIndices.getArray()!, dstIndicesArray.length);\n\t\tdstIndicesTypedArray.set(dstIndicesArray);\n\t\tprim.setIndices(srcIndices.clone().setArray(dstIndicesTypedArray));\n\n\t\t// Clean up.\n\t\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\t} else {\n\t\tconst indicesArray = srcVertexCount <= 65534\n\t\t\t? new Uint16Array(dstIndicesArray)\n\t\t\t: new Uint32Array(dstIndicesArray);\n\t\tprim.setIndices(doc.createAccessor().setArray(indicesArray));\n\t}\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\t\tparent: Primitive | PrimitiveTarget,\n\t\tsrcAttr: Accessor,\n\t\tdstAttrElements: number[][]): void {\n\tconst dstAttrArrayLength = dstAttrElements.length * srcAttr.getElementSize();\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstAttrArrayLength);\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\n\tfor (let i = 0; i < dstAttrElements.length; i++) {\n\t\tdstAttr.setElement(i, dstAttrElements[i]);\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n}\n"],"names":["rewriteTexture","source","target","fn","srcImage","getImage","getPixels","getMimeType","pixels","i","shape","j","savePixels","dstImage","setImage","setMimeType","createTransform","name","Object","defineProperty","value","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","_map","Map","size","has","k","add","v","entry","this","get","Set","set","keys","CENTER_DEFAULTS","pivot","NAME","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","MATERIAL","dedup","_options","options","propertyType","includes","doc","logger","getLogger","indicesAccessors","attributeAccessors","inputAccessors","outputAccessors","meshes","getRoot","listMeshes","forEach","mesh","listPrimitives","primitive","listAttributes","accessor","animation","listAnimations","sampler","listSamplers","input","getInput","output","getOutput","detectDuplicates","accessors","duplicateAccessors","length","a","aData","BufferUtils","toView","getArray","b","getType","getComponentType","getNormalized","equals","duplicateIndices","Array","from","debug","duplicateAttributes","duplicateInputs","duplicateOutputs","swap","dispose","attribute","dedupAccessors","root","refs","listAccessors","index","listMaterials","material","numMeshes","uniqueMeshes","src","srcKeyItems","push","createPrimitiveKey","meshKey","join","targetMesh","listParents","parent","ROOT","dedupMeshes","textures","listTextures","duplicates","bData","aSize","getSize","bSize","entries","dst","property","Root","dedupImages","materials","dedupMaterials","primKeyItems","semantic","listSemantics","getMaterial","listTargets","DEQUANTIZE_DEFAULTS","pattern","dequantizePrimitive","dequantizeAttribute","test","getComponentSize","srcArray","dstArray","Float32Array","il","el","getElement","setArray","setElement","setNormalized","listScenes","properties","map","scene","listChildren","sceneBounds","bounds","getName","rootName","bboxMin","toPrecision","min","bboxMax","max","instances","filter","glPrimitives","verts","semantics","meshIndices","meshAccessors","attr","arrayToType","targ","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","sort","attributes","extensions","listExtensions","slots","getGraph","listEdges","ref","child","getChild","getParent","Texture","ExtensionProperty","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","listParentEdges","edge","resolution","ImageUtils","uri","getURI","mimeType","gpuSize","getMemSize","anim","minTime","Infinity","maxTime","Math","getMin","getMax","keyframes","channels","listChannels","samplers","duration","round","toFixed","Number","array","constructor","replace","toLowerCase","INSTANCE_DEFAULTS","pruneUnusedNodes","nodes","node","unusedNodes","pop","getCamera","getMesh","getSkin","nodeParent","Node","createBatch","batchExtension","count","buffer","getBuffer","batchTranslation","createAccessor","setType","setBuffer","batchRotation","batchScale","createInstancedMesh","setAttribute","_this","s","e","_isSettledPact","METALROUGH_DEFAULTS","PRUNE_DEFAULTS","NODE","SKIN","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","prune","graph","disposed","listNodes","treeShake","listSkins","listCameras","indirectTreeShake","channel","getTargetNode","markDisposed","listBuffers","str","t","info","prop","p","AnimationChannel","PARTITION_DEFAULTS","animations","createBufferURI","basename","existing","SIGNED_INT","Int8Array","Int16Array","Int32Array","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizationVolume","quantizePosition","quantizeNormal","quantizeTexcoord","quantizeColor","quantizeWeight","quantizeGeneric","quantizePrimitive","nodeTransform","srcAttribute","bits","ctor","getQuantizationSettings","dstAttribute","clone","scale","transform","invert","fromTransform","fromScaling","transformMat4","quantizeAttribute","vertexCount","weightsEl","weights","vertexWeightsSum","leastWeight","leastIndex","leastAttribute","attributeIndex","normalizeWeights","Uint16Array","getNodeTransform","volume","offset","transformMeshParents","transformMatrix","animChannels","isAnimated","some","getTargetPath","isParentNode","setSkin","transformSkin","targetNode","createNode","setMesh","addChild","setTargetNode","nodeMatrix","getMatrix","multiplyMat4","setMatrix","skin","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","pow","lo","hi","di","abs","sign","getMinNormalized","getMaxNormalized","startsWith","Uint8Array","warn","getPositionQuantizationVolume","positions","relativePositions","bbox","flatBounds","relMin","relMax","elementSize","fill","tmpMin","tmpMax","fromRotationTranslationScale","RESAMPLE_DEFAULTS","tolerance","optimize","lastIndex","tmp","writeIndex","time","getScalar","timePrev","timeNext","timeMix","keep","getElementSize","valuePrev","valueNext","getInterpolation","setScalar","slice","setInput","setOutput","REORDER_DEFAULTS","remapAttribute","remap","dstCount","srcCount","SEQUENCE_DEFAULTS","fps","TANGENTS_DEFAULTS","overwrite","getNormalTexcoord","normalTextureInfo","getNormalTextureInfo","getTexCoord","filterPrimitive","meshName","_Pact","prototype","state","result","thenable","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","UNWELD_DEFAULTS","unweldAttribute","visited","ArrayCtor","WELD_DEFAULTS","weldOnly","numVertices","indicesArray","Uint32Array","Accessor","Type","SCALAR","setIndices","weldAndMerge","EPSILON","decimalShift","log10","shiftFactor","hashToIndex","srcIndices","dstAttributes","dstIndicesArray","nextIndex","hashElements","hash","srcVertexCount","dstVertexCount","srcAttr","swapAttributes","dstIndicesTypedArray","createArrayOfType","dstAttrElements","dstAttrArrayLength","dstAttrArray","dstAttr","offsetNode","setTranslation","getTranslation","inputEncoding","error","converted","sRGBToLinear","c","updatePrimitive","color","createExtension","MeshQuantization","scenes","MeshGPUInstancing","numBatches","numInstances","meshInstances","traverse","modifiedNodes","batch","batchNode","setExtension","needsTranslation","needsRotation","needsScale","r","getWorldTranslation","getWorldRotation","getWorldScale","MathUtils","eq","specGlossExtension","tex","inputTextures","listExtensionsUsed","ext","extensionName","iorExtension","MaterialsIOR","specExtension","MaterialsSpecular","MaterialsPBRSpecularGlossiness","specGloss","getExtension","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","existingURIs","meshIndex","isArray","createBuffer","setURI","primTarget","partitionMeshes","animIndex","partitionAnimations","setRequired","bboxes","expandBounds","encoder","ready","plan","indicesToAttributes","indicesToMode","attributesToPrimitives","preprocessPrimitives","dstIndices","unique","reorderMesh","context","accessorsVisited","accessorsCountPrev","didSkipMorphTargets","morphTargetSamplers","getSampler","values","initial","pending","stack","lastIndexOf","isTransformPending","sequenceNodes","match","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","generateTangents","attributeIDs","tangentCache","modified","meshPrimitives","texcoordSemantic","normal","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangent","tangentBuffer","tangentArray","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","floor","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","message","_setImage"],"mappings":"0TAsBsBA,WACpBC,EACAC,EACAC,OAED,IAAKF,EAAQ,uBAAO,MAEpB,MAAMG,EAAWH,EAAOI,WACxB,OAAKD,kBAEgBE,YAAUF,EAAUH,EAAOM,8BAA1CC,GAEN,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAOE,MAAM,KAAMD,EACrC,IAAI,IAAIE,EAAI,EAAGA,EAAIH,EAAOE,MAAM,KAAMC,EACrCR,EAAGK,EAAQC,EAAGE,0BAIOC,aAAWJ,EAAQ,4BAApCK,GACN,OAAOX,EAAOY,SAASD,GAAUE,YAAY,iCAXvB,MARvB,6CAbgBC,EAAgBC,EAAcd,GAE7C,OADAe,OAAOC,eAAehB,EAAI,OAAQ,CAAEiB,MAAOH,IACpCd,WAiCQkB,EAAoBC,GACnC,MAAMC,EAAUD,EAAKE,aACfC,EAAWH,EAAKI,aAAa,YAGnC,OAAQJ,EAAKK,WACZ,KAAKC,YAAUC,KAAKC,OACnB,OAAOL,EAASM,WACjB,KAAKH,YAAUC,KAAKG,MACnB,OAAOT,EACJA,EAAQQ,WAAa,EACrBN,EAASM,WAAa,EAC1B,KAAKH,YAAUC,KAAKI,UACnB,OAAOR,EAASM,WACjB,KAAKH,YAAUC,KAAKK,WACnB,OAAOT,EAASM,WAAa,EAC9B,KAAKH,YAAUC,KAAKM,UACnB,OAAOZ,EACJA,EAAQQ,WAAa,EACrBN,EAASM,WAAa,EAC1B,KAAKH,YAAUC,KAAKO,eACpB,KAAKR,YAAUC,KAAKQ,aACnB,OAAOZ,EAASM,WAAa,EAC9B,QACC,UAAUO,MAAM,oBAAsBhB,EAAKK,kBAIjCY,qBACJC,KAAO,IAAIC,IACJC,WACd,YAAYF,KAAKE,KAEXC,IAAIC,GACV,YAAYJ,KAAKG,IAAIC,GAEfC,IAAID,EAAME,GAChB,IAAIC,EAAQC,KAAKR,KAAKS,IAAIL,GAM1B,OALKG,IACJA,EAAQ,IAAIG,IACZF,KAAKR,KAAKW,IAAIP,EAAGG,IAElBA,EAAMF,IAAIC,QAGJG,IAAIL,GACV,YAAYJ,KAAKS,IAAIL,IAAM,IAAIM,IAEzBE,OACN,YAAYZ,KAAKY,QCzFnB,MAQMC,EAA2C,CAACC,MAAO,UCTnDC,EAAO,aCOPC,EAAyC,CAC9CC,cAAe,CACdC,eAAaC,SACbD,eAAaE,KACbF,eAAaG,QACbH,eAAaI,WAoBFC,EAAQ,SAAUC,EAAyBR,GACvD,MAAMS,EAAU,IAAIT,KAAmBQ,GAEjCP,EAAgB,IAAIP,IAAIe,EAAQR,eACtC,IAAK,MAAMS,KAAgBD,EAAQR,cAClC,IAAKD,EAAeC,cAAcU,SAASD,GAC1C,UAAU5B,mDAAqD4B,OAIjE,OAAOlD,EA1CK,QA0CkBoD,IAC7B,MAAMC,EAASD,EAAIE,YAEfb,EAAcd,IAAIe,eAAaC,WAUrC,SAAwBU,EAAgBD,GAEvC,MAAMG,EAAkC,IAAIrB,IACtCsB,EAAoC,IAAItB,IACxCuB,EAAgC,IAAIvB,IACpCwB,EAAiC,IAAIxB,IAErCyB,EAASP,EAAIQ,UAAUC,aAC7BF,EAAOG,QAASC,IACfA,EAAKC,iBAAiBF,QAASG,IAC9BA,EAAUC,iBAAiBJ,QAASK,GAAcX,EAAmB3B,IAAIsC,IACzE,MAAM5D,EAAU0D,EAAUzD,aACtBD,GAASgD,EAAiB1B,IAAItB,OAIpC,IAAK,MAAM6D,KAAahB,EAAIQ,UAAUS,iBACrC,IAAK,MAAMC,KAAWF,EAAUG,eAAgB,CAC/C,MAAMC,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAAOf,EAAe5B,IAAI2C,GAC1BE,GAAQhB,EAAgB7B,IAAI6C,GAKlC,SAASE,EAAiBC,GACzB,MAAMC,EAA8C,IAAIrD,IAExD,IAAK,IAAIhC,EAAI,EAAGA,EAAIoF,EAAUE,OAAQtF,IAAK,CAC1C,MAAMuF,EAAIH,EAAUpF,GACdwF,EAAQC,cAAYC,OAAOH,EAAEI,YAEnC,IAAIN,EAAmBnD,IAAIqD,GAE3B,IAAK,IAAIrF,EAAI,EAAGA,EAAIkF,EAAUE,OAAQpF,IAAK,CAC1C,MAAM0F,EAAIR,EAAUlF,GAEhBqF,IAAMK,IACNP,EAAmBnD,IAAI0D,IAEvBL,EAAEM,YAAcD,EAAEC,WAClBN,EAAEO,qBAAuBF,EAAEE,oBAC3BP,EAAEjE,aAAesE,EAAEtE,YACnBiE,EAAEQ,kBAAoBH,EAAEG,iBACxBN,cAAYO,OAAOR,EAAOC,cAAYC,OAAOE,EAAED,cAClDN,EAAmB3C,IAAIkD,EAAGL,KAK7B,OAAOF,EAGR,MAAMY,EAAmBd,EAAiBe,MAAMC,KAAKrC,IACrDF,EAAOwC,sBACYH,EAAiBhE,yBAAyB6B,EAAiB7B,iBAG9E,MAAMoE,EAAsBlB,EAAiBe,MAAMC,KAAKpC,IACxDH,EAAOwC,sBACYC,EAAoBpE,yBAAyB8B,EAAmB9B,oBAInF,MAAMqE,EAAkBnB,EAAiBe,MAAMC,KAAKnC,IAC9CuC,EAAmBpB,EAAiBe,MAAMC,KAAKlC,IACrDL,EAAOwC,sBACYE,EAAgBrE,KAAOsE,EAAiBtE,yBACpD+B,EAAe/B,KAAOgC,EAAgBhC,6BAI7CiC,EAAOG,QAASC,IACfA,EAAKC,iBAAiBF,QAASG,IAC9BA,EAAUC,iBAAiBJ,QAASK,IAC/B2B,EAAoBnE,IAAIwC,IAC3BF,EAAUgC,KAAK9B,EAAU2B,EAAoB7D,IAAIkC,MAGnD,MAAM5D,EAAU0D,EAAUzD,aACtBD,GAAWmF,EAAiB/D,IAAIpB,IACnC0D,EAAUgC,KAAK1F,EAASmF,EAAiBzD,IAAI1B,QAIhDoF,MAAMC,KAAKF,EAAiBtD,QAAQ0B,QAASvD,GAAYA,EAAQ2F,WACjEP,MAAMC,KAAKE,EAAoB1D,QAAQ0B,QAASqC,GAAcA,EAAUD,WAGxE,IAAK,MAAM9B,KAAahB,EAAIQ,UAAUS,iBACrC,IAAK,MAAMC,KAAWF,EAAUG,eAAgB,CAC/C,MAAMC,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAASuB,EAAgBpE,IAAI6C,IAChCF,EAAQ2B,KAAKzB,EAAOuB,EAAgB9D,IAAIuC,IAErCE,GAAUsB,EAAiBrE,IAAI+C,IAClCJ,EAAQ2B,KAAKvB,EAAQsB,EAAiB/D,IAAIyC,IAI7CiB,MAAMC,KAAKG,EAAgB3D,QAAQ0B,QAASU,GAAUA,EAAM0B,WAC5DP,MAAMC,KAAKI,EAAiB5D,QAAQ0B,QAASY,GAAWA,EAAOwB,WAjHhBE,CAAe/C,EAAQD,GACjEX,EAAcd,IAAIe,eAAaE,OAmHrC,SAAqBS,EAAgBD,GACpC,MAAMiD,EAAOjD,EAAIQ,UAGX0C,EAAO,IAAI7E,IACjB4E,EAAKE,gBAAgBzC,QAAQ,CAACK,EAAUqC,IAAUF,EAAKnE,IAAIgC,EAAUqC,IACrEH,EAAKI,gBAAgB3C,QAAQ,CAAC4C,EAAUF,IAAUF,EAAKnE,IAAIuE,EAAUF,IAGrE,MAAMG,EAAYN,EAAKxC,aAAakB,OAC9B6B,EAAe,IAAInF,IACzB,IAAK,MAAMoF,KAAOR,EAAKxC,aAAc,CAEpC,MAAMiD,EAAc,GACpB,IAAK,MAAMxG,KAAQuG,EAAI7C,iBACtB8C,EAAYC,KAAKC,EAAmB1G,EAAMgG,IAK3C,MAAMW,EAAUH,EAAYI,KAAK,KACjC,GAAIN,EAAajF,IAAIsF,GAAU,CAC9B,MAAME,EAAaP,EAAa3E,IAAIgF,GACpCJ,EAAIO,cAActD,QAASuD,IACtBA,EAAOnE,eAAiBR,eAAa4E,MACxCD,EAAOpB,KAAKY,EAAKM,KAGnBN,EAAIX,eAEJU,EAAazE,IAAI8E,EAASJ,GAI5BxD,EAAOwC,sBACYc,EAAYC,EAAalF,yBAAyBiF,aAtJ1BY,CAAYlE,EAAQD,GAC1DX,EAAcd,IAAIe,eAAaG,UAyJrC,SAAqBQ,EAAgBD,GACpC,MAAMiD,EAAOjD,EAAIQ,UACX4D,EAAWnB,EAAKoB,eAChBC,EAAoC,IAAIjG,IAG9C,IAAK,IAAIhC,EAAI,EAAGA,EAAI+H,EAASzC,OAAQtF,IAAK,CACzC,MAAMuF,EAAIwC,EAAS/H,GACbwF,EAAQD,EAAE3F,WAEhB,IAAIqI,EAAW/F,IAAIqD,GAEnB,IAAK,IAAIrF,EAAI,EAAGA,EAAI6H,EAASzC,OAAQpF,IAAK,CACzC,MAAM0F,EAAImC,EAAS7H,GACbgI,EAAQtC,EAAEhG,WAEhB,GAAI2F,IAAMK,EAAG,SACb,GAAIqC,EAAW/F,IAAI0D,GAAI,SAGvB,GAAIL,EAAEzF,gBAAkB8F,EAAE9F,cAAe,SAEzC,MAAMqI,EAAQ5C,EAAE6C,UACVC,EAAQzC,EAAEwC,UACXD,GAAUE,GACXF,EAAM,KAAOE,EAAM,IACnBF,EAAM,KAAOE,EAAM,IAClB7C,GAAU0C,GACXzC,cAAYO,OAAOR,EAAO0C,IAC7BD,EAAWvF,IAAIkD,EAAGL,IAKrB3B,EAAOwC,sBACY6B,EAAWhG,yBAAyB2E,EAAKoB,eAAe1C,oBAG3EY,MAAMC,KAAK8B,EAAWK,WAAWjE,QAAQ,EAAE+C,EAAKmB,MAC/CnB,EAAIO,cAActD,QAASmE,IACpBA,aAAoBC,QAAOD,EAAShC,KAAKY,EAAKmB,KAErDnB,EAAIX,YAnMyCiC,CAAY9E,EAAQD,GAC7DX,EAAcd,IAAIe,eAAaI,WAsMrC,SAAwBO,EAAgBD,GACvC,MAAMiD,EAAOjD,EAAIQ,UACXwE,EAAY/B,EAAKI,gBACjBiB,EAAsC,IAAIjG,IAGhD,IAAK,IAAIhC,EAAI,EAAGA,EAAI2I,EAAUrD,OAAQtF,IAAI,CACzC,MAAMuF,EAAIoD,EAAU3I,GAEpB,IAAIiI,EAAW/F,IAAIqD,GAEnB,IAAK,IAAIrF,EAAI,EAAGA,EAAIyI,EAAUrD,OAAQpF,IAAI,CACzC,MAAM0F,EAAI+C,EAAUzI,GAEhBqF,IAAMK,IACNqC,EAAW/F,IAAI0D,IAEfL,EAAES,OAAOJ,IACZqC,EAAWvF,IAAIkD,EAAGL,KAKrB3B,EAAOwC,sBAEY6B,EAAWhG,yBAAyB2E,EAAKI,gBAAgB1B,qBAG5EY,MAAMC,KAAK8B,EAAWK,WAAWjE,QAAQ,EAAE+C,EAAKmB,MAC/CnB,EAAIO,cAActD,QAASmE,IACpBA,aAAoBC,QAAOD,EAAShC,KAAKY,EAAKmB,KAErDnB,EAAIX,YAtO0CmC,CAAehF,EAAQD,GAErEC,EAAOwC,6BAyOT,SAASmB,EACR1G,EACAgG,GAEA,MAAMgC,EAAe,GACrB,IAAK,MAAMC,KAAYjI,EAAKkI,gBAAiB,CAC5C,MAAMrC,EAAY7F,EAAKI,aAAa6H,GACpCD,EAAavB,KAAKwB,EAAW,IAAMjC,EAAKrE,IAAIkE,IAE7C,GAAI7F,aAAgBM,YAAW,CAC9B,MAAML,EAAUD,EAAKE,aACjBD,GACH+H,EAAavB,KAAK,WAAaT,EAAKrE,IAAI1B,IAEzC,MAAMmG,EAAWpG,EAAKmI,cAClB/B,GACH4B,EAAavB,KAAK,YAAcT,EAAKrE,IAAIyE,IAE1C4B,EAAavB,KAAK,QAAUzG,EAAKK,WACjC,IAAK,MAAMzB,KAAUoB,EAAKoI,cACzBJ,EAAavB,KAAK,UAAYC,EAAmB9H,EAAQoH,IAG3D,OAAOgC,EAAapB,KAAK,KCjT1B,MAWMyB,EAAyC,CAC9CC,QAAS,qBAuBV,SAASC,EAAoBvI,EAAiB2C,GAC7C,IAAK,MAAMsF,KAAYjI,EAAKkI,gBAC3BM,EAAoBP,EAAUjI,EAAKI,aAAa6H,GAAYtF,GAE7D,IAAK,MAAM/D,KAAUoB,EAAKoI,cACzB,IAAK,MAAMH,KAAYrJ,EAAOsJ,gBAC7BM,EAAoBP,EAAUrJ,EAAOwB,aAAa6H,GAAYtF,GAKjE,SAAS6F,EAAoBP,EAAkBpC,EAAqBlD,GACnE,IAAKkD,EAAUf,WAAY,OAC3B,IAAKnC,EAAQ2F,QAAQG,KAAKR,GAAW,OACrC,GAAIpC,EAAU6C,oBAAsB,EAAG,OAEvC,MAAMC,EAAW9C,EAAUf,WACrB8D,EAAW,IAAIC,aAAaF,EAASlE,QAE3C,IAAK,IAAItF,EAAI,EAAG2J,EAAKjD,EAAUpF,WAAYsI,EAAK,GAAgB5J,EAAI2J,EAAI3J,IACvE4J,EAAKlD,EAAUmD,WAAW7J,EAAG4J,GAC7BlD,EAAUoD,SAASL,GAAUM,WAAW/J,EAAG4J,GAAIE,SAASN,GAGzD9C,EAAUoD,SAASL,GAAUO,eAAc,GChD5C,SAASC,EAAYtG,GAWpB,MAAO,CAACuG,WAVOvG,EAAIQ,UAAU8F,aAAaE,IAAKC,IAC9C,MAAMxD,EAAOwD,EAAMC,eAAe,GAC5BC,EAAcC,SAAOH,GAC3B,MAAO,CACN5J,KAAM4J,EAAMI,UACZC,SAAU7D,EAAOA,EAAK4D,UAAY,GAClCE,QAASC,EAAYL,EAAYM,KACjCC,QAASF,EAAYL,EAAYQ,SAOpC,SAAS1G,EAAYT,GAgDpB,MAAO,CAACuG,WA/C4BvG,EAAIQ,UAAUC,aAAa+F,IAAK7F,IACnE,MAAMyG,EAAYzG,EAAKqD,cACrBqD,OAAQpD,GAAmC,SAAxBA,EAAOnE,cAC1B6B,OACF,IAAI2F,EAAe,EACfC,EAAQ,EACZ,MAAMC,EAAY,IAAI1I,IAChB2I,EAAc,IAAI3I,IAClB4I,EAA+B,IAAI5I,IAEzC6B,EAAKC,iBAAiBF,QAASxD,IAC9B,IAAK,MAAMiI,KAAYjI,EAAKkI,gBAAiB,CAC5C,MAAMuC,EAAOzK,EAAKI,aAAa6H,GAC/BqC,EAAU/I,IAAI0G,EAAW,IAAMyC,EAAYD,EAAK3F,aAChD0F,EAAcjJ,IAAIkJ,GAEnB,IAAK,MAAME,KAAQ3K,EAAKoI,cACvBuC,EAAK/G,iBAAiBJ,QAASiH,GAASD,EAAcjJ,IAAIkJ,IAE3D,MAAMxK,EAAUD,EAAKE,aACjBD,IACHsK,EAAYhJ,IAAImJ,EAAYzK,EAAQ6E,aACpC0F,EAAcjJ,IAAItB,IAEnBoK,GAASrK,EAAK4D,iBAAiB,GAAGnD,WAClC2J,GAAgBrK,EAAoBC,KAGrC,IAAIoB,EAAO,EACXiE,MAAMC,KAAKkF,GAAehH,QAASkB,GAAOtD,GAAQsD,EAAEI,WAAY8F,YAEhE,MAAMC,EAAQpH,EAAKC,iBACjB4F,IAAKtJ,GAAS8K,EAAwB9K,EAAKK,YAE7C,MAAO,CACNV,KAAM8D,EAAKkG,UACXoB,KAAM1F,MAAMC,KAAK,IAAI1D,IAAIiJ,IACzBG,WAAYvH,EAAKC,iBAAiBe,OAClC2F,aAAcA,EACda,SAAUZ,EACVpK,QAASoF,MAAMC,KAAKiF,GAAaW,OACjCC,WAAY9F,MAAMC,KAAKgF,GAAWY,OAClChB,UAAWA,EACX9I,KAAMA,MAQT,SAAS+E,EAAerD,GAiCvB,MAAO,CAACuG,WAhCmCvG,EAAIQ,UAAU6C,gBAAgBmD,IAAKlD,IAC7E,MAAM8D,EAAY9D,EAASU,cACzBqD,OAAQpD,GAAmC,SAAxBA,EAAOnE,cAC1B6B,OAGI2G,EAAa,IAAIxJ,IAAuBwE,EAASiF,kBACjDC,EAAQxI,EAAIyI,WAAWC,YAC3BrB,OAAQsB,IACR,MAAMC,EAAQD,EAAIE,WACZ5E,EAAS0E,EAAIG,YACnB,OAAIF,aAAiBG,WAAW9E,IAAWX,MAGvCsF,aAAiBG,WAChB9E,aAAkB+E,qBAClBV,EAAW/J,IAAI0F,MAKpBuC,IAAKmC,GAAQA,EAAI9B,WAEnB,MAAO,CACNhK,KAAMyG,EAASuD,UACfO,UAAAA,EACAhD,SAAUoE,EACVS,UAAW3F,EAAS4F,eACpBC,YAAa7F,EAAS8F,qBAQzB,SAAS/E,EAAcrE,GAwBtB,MAAO,CAACuG,WAvBiCvG,EAAIQ,UAAU6D,eAAemC,IAAK6C,IAC1E,MAAMjC,EAAYiC,EAAQrF,cACxBqD,OAAQpD,GAAmC,SAAxBA,EAAOnE,cAC1B6B,OAEI6G,EAAQxI,EAAIyI,WAAWa,gBAAgBD,GAC3C7C,IAAK+C,GAASA,EAAK1C,WACnBQ,OAAQxK,GAAkB,YAATA,GAEb2M,EAAaC,aAAWhF,QAAQ4E,EAAQpN,WAAaoN,EAAQlN,eAEnE,MAAO,CACNU,KAAMwM,EAAQxC,UACd6C,IAAKL,EAAQM,SACbnB,MAAOjG,MAAMC,KAAK,IAAI1D,IAAI0J,IAC1BpB,UAAAA,EACAwC,SAAUP,EAAQlN,cAClBqN,WAAYA,EAAaA,EAAW1F,KAAK,KAAO,GAChDxF,KAAM+K,EAAQpN,WAAY6L,WAC1B+B,QAASJ,aAAWK,WAAWT,EAAQpN,WAAaoN,EAAQlN,mBAQ/D,SAAS8E,EAAgBjB,GAqCxB,MAAO,CAACuG,WApCqCvG,EAAIQ,UAAUS,iBAAiBuF,IAAKuD,IAChF,IAAIC,EAAUC,SACVC,GAAWD,SACfF,EAAK5I,eAAeT,QAASQ,IAC5B,MAAME,EAAQF,EAAQG,WACjBD,IACL4I,EAAUG,KAAKlD,IAAI+C,EAAS5I,EAAMgJ,OAAO,IAAI,IAC7CF,EAAUC,KAAKhD,IAAI+C,EAAS9I,EAAMiJ,OAAO,IAAI,OAG9C,IAAI/L,EAAO,EACPgM,EAAY,EAChB,MAAM7I,EAA2B,IAAI3C,IAcrC,OAbAiL,EAAK5I,eAAeT,QAASQ,IAC5B,MAAME,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YAClBH,IACLkJ,GAAalJ,EAAMzD,WACnB8D,EAAUhD,IAAI2C,GACTE,GACLG,EAAUhD,IAAI6C,MAEfiB,MAAMC,KAAKf,GAAWf,QAASK,IAC9BzC,GAAQyC,EAASiB,WAAY8F,aAGvB,CACNjL,KAAMkN,EAAKlD,UACX0D,SAAUR,EAAKS,eAAe7I,OAC9B8I,SAAUV,EAAK5I,eAAeQ,OAC9B+I,SAAUP,KAAKQ,MAA4B,KAArBT,EAAUF,IAAmB,IACnDM,UAAWA,EACXhM,KAAMA,MAoET,MAAM0J,EAA0B,CAC/B,SACA,QACA,YACA,aACA,YACA,iBACA,gBAID,SAAShB,EAAYtI,GACpB,IAAK,IAAIrC,EAAI,EAAGA,EAAIqC,EAAEiD,OAAQtF,IACxBqC,EAAErC,GAAcuO,UAASlM,EAAErC,GAAKwO,OAAOnM,EAAErC,GAAGuO,QAAQ,KAE1D,OAAOlM,EAGR,SAASkJ,EAAYkD,GACpB,OAAOA,EAAMC,YAAYlO,KAAKmO,QAAQ,QAAS,IAAIC,cCvQpD,MAKMC,EAA+C,GA+FrD,SAASC,EAAiBC,EAAenL,GACxC,IAAIoL,EACAC,EAAc,EAClB,KAAQD,EAAOD,EAAMG,OAAQ,CAC5B,GAAIF,EAAK3E,eAAe/E,QACnB0J,EAAKG,aACLH,EAAKI,WACLJ,EAAKK,WACLL,EAAK9C,iBAAiB5G,OAC1B,SAED,MAAMgK,EAAaN,EAAKvC,YACpB6C,aAAsBC,QACzBR,EAAMzH,KAAKgI,GAEZN,EAAKvI,UACLwI,IAGDrL,EAAOwC,2BAA0B6I,mBAGlC,SAASO,EACP7L,EACA8L,EACAnL,EACAoL,GACD,MAAMC,EAASrL,EAAKC,iBAAiB,GAAGtD,aAAa,YAAa2O,YAE5DC,EAAmBlM,EAAImM,iBAC3BC,QAAQ,QACRjG,SAAS,IAAIJ,aAAa,EAAIgG,IAC9BM,UAAUL,GACNM,EAAgBtM,EAAImM,iBACxBC,QAAQ,QACRjG,SAAS,IAAIJ,aAAa,EAAIgG,IAC9BM,UAAUL,GACNO,EAAavM,EAAImM,iBACrBC,QAAQ,QACRjG,SAAS,IAAIJ,aAAa,EAAIgG,IAC9BM,UAAUL,GAEZ,OAAOF,EAAeU,sBACpBC,aAAa,cAAeP,GAC5BO,aAAa,WAAYH,GACzBG,aAAa,QAASF,gSChFuB,0NAhD/C,iEAYCG,EAAMC,YACoC3P,mCAQzC4P,+BAwCCC,kCAzEJ,MAAMC,EAAmD,GCAnDC,EAAyC,CAC9C1N,cAAe,CACdC,eAAa0N,KACb1N,eAAa2N,KACb3N,eAAaE,KACbF,eAAa4N,OACb5N,eAAa6N,UACb7N,eAAa8N,iBACb9N,eAAa+N,UACb/N,eAAaI,SACbJ,eAAaG,QACbH,eAAaC,SACbD,eAAagO,SAqBFC,EAAQ,SAAU3N,EAAyBmN,GAEvD,MACM1N,EADU,IAAI0N,KAAmBnN,GACTP,cAE9B,OAAOzC,EA5CK,QA4CkBoD,IAC7B,MAAMC,EAASD,EAAIE,YACb+C,EAAOjD,EAAIQ,UACXgN,EAAQxN,EAAIyI,WAEZgF,EAAmC,GAqBzC,GAhBIpO,EAAcU,SAAST,eAAa0N,OAAO/J,EAAKyK,YAAYhN,QAAQiN,GACpEtO,EAAcU,SAAST,eAAa2N,OAAOhK,EAAK2K,YAAYlN,QAAQiN,GACpEtO,EAAcU,SAAST,eAAaE,OAAOyD,EAAKxC,aAAaC,QAAQiN,GACrEtO,EAAcU,SAAST,eAAa4N,SAASjK,EAAK4K,cAAcnN,QAAQiN,GAExEtO,EAAcU,SAAST,eAAa6N,YACvCW,EAAkBN,EAAOlO,eAAa6N,WAEnC9N,EAAcU,SAAST,eAAa8N,mBACvCU,EAAkBN,EAAOlO,eAAa8N,kBAOnC/N,EAAcU,SAAST,eAAa+N,WACvC,IAAK,MAAMtD,KAAQ9G,EAAKhC,iBAAkB,CACzC,IAAK,MAAM8M,KAAWhE,EAAKS,eACrBuD,EAAQC,kBACZD,EAAQjL,UACRmL,EAAaF,IAGf,GAAKhE,EAAKS,eAAe7I,OAKxBoI,EAAK5I,eAAeT,QAAQiN,OALI,CAChC,MAAMlD,EAAWV,EAAK5I,eACtBwM,EAAU5D,GACVU,EAAS/J,QAAQiN,IAiBpB,GAVItO,EAAcU,SAAST,eAAaI,WAAWuD,EAAKI,gBAAgB3C,QAAQiN,GAC5EtO,EAAcU,SAAST,eAAaG,UAAUwD,EAAKoB,eAAe3D,QAAQiN,GAC1EtO,EAAcU,SAAST,eAAaC,WAAW0D,EAAKE,gBAAgBzC,QAAQiN,GAC5EtO,EAAcU,SAAST,eAAagO,SAASrK,EAAKiL,cAAcxN,QAAQiN,GAOxE7Q,OAAOkC,KAAKyO,GAAU9L,OAAQ,CACjC,MAAMwM,EAAMrR,OAAOkC,KAAKyO,GAAUjH,IAAK4H,MAASA,MAAMX,EAASW,OAAOtK,KAAK,MAC3E7D,EAAOoO,gCAAkCF,UAEzClO,EAAOoO,2CAQR,SAASV,EAAUW,GAGFA,EAAKtK,cACnBqD,OAAQkH,KAAQA,aAAazJ,QAAQyJ,aAAaC,qBACvC7M,SACZ2M,EAAKxL,UACLmL,EAAaK,IASf,SAASR,EAAkBN,EAAwB1N,GAClD0N,EAAM9E,YACJlC,IAAK+C,GAASA,EAAKT,aACnBzB,OAAQpD,GAAWA,EAAOnE,eAAiBA,GAC3CY,QAAQiN,GAIX,SAASM,EAAaK,GACrBb,EAASa,EAAKxO,cAAgB2N,EAASa,EAAKxO,eAAiB,EAC7D2N,EAASa,EAAKxO,gBA/BfG,EAAOwC,6BCjGHgM,EAAkD,CACvDC,YAAY,EACZnO,QAAQ,GAkGT,SAASoO,EAAiBC,EAAkBC,GAC3C,IAAInF,KAASkF,QACTvS,EAAI,EACR,KAAOwS,EAAStQ,IAAImL,IAAMA,KAASkF,KAAYvS,UAC/C,OAAOqN,EC1FR,MAOMoF,EAAa,CAACC,UAAWC,WAAYC,aAErCC,YAAEA,EAAFC,SAAeA,EAAfC,MAAyBA,EAAzBC,QAAgCA,GAAYb,mBAAiBc,WAC7DC,EAAe,CAACL,EAAaC,EAAUC,GAsBhCI,EAA+C,CAC3DhK,QAAS,KACTiK,mBAAoB,OACpBC,iBAAkB,GAClBC,eAAgB,GAChBC,iBAAkB,GAClBC,cAAe,EACfC,eAAgB,EAChBC,gBAAiB,IAyDlB,SAASC,EACRhQ,EACA9C,EACA+S,EACApQ,GAEA,MAAMI,EAASD,EAAIE,YAEnB,IAAK,MAAMiF,KAAYjI,EAAKkI,gBAAiB,CAC5C,IAAKvF,EAAQ2F,QAAQG,KAAKR,GAAW,SAErC,MAAM+K,EAAehT,EAAKI,aAAa6H,IACjCgL,KAAEA,EAAFC,KAAQA,GAASC,EAAwBlL,EAAU+K,EAAcjQ,EAAQJ,GAE/E,IAAKuQ,EAAM,SACX,GAAID,EAAO,GAAKA,EAAO,GAAI,UAAUjS,yCACrC,GAAIgS,EAAatK,oBAAsBuK,EAAO,EAAG,SAEjD,MAAMG,EAAeJ,EAAaK,QAGlC,GAAiB,aAAbpL,EAAyB,CAC5B,MAAMqL,EAAQP,EAAcO,MACtBC,EAAkB,GAExBvT,aAAgBM,YACbkT,SAAOD,EAAWE,GAAcV,IAChCW,cAAYH,EAAW,CAAC,EAAID,EAAO,EAAIA,EAAO,EAAIA,IACrD,IAAK,IAAInU,EAAI,EAAG4J,EAAW,CAAC,EAAG,EAAG,GAAID,EAAKsK,EAAa3S,WAAYtB,EAAI2J,EAAI3J,IAC3EiU,EAAapK,WAAW7J,EAAG4J,GAC3BqK,EAAalK,WAAW/J,EAAGwU,gBAAc5K,EAAIA,EAAIwK,IAKnDK,EAAkBR,EAAcF,EAAMD,GACtCjT,EAAK2F,KAAKqN,EAAcI,GAQzB,GAJIpT,EAAKI,aAAa,cA4PvB,SAA0BJ,GACzB,MAAM6T,EAAc7T,EAAKI,aAAa,YAAaK,WAC7CqT,EAAsB,GAE5B,IAAK,IAAI3U,EAAI,EAAGA,EAAI0U,EAAa1U,IAAK,CACrC,IAMI4U,EANAC,EAAmB,EAEnBC,EAAclH,SACdmH,GAAc,EACdC,EAAkC,KAGlCC,EAAiB,EAGrB,KAAQL,EAAU/T,EAAKI,wBAAwBgU,MAAsB,CACpEL,EAAQ/K,WAAW7J,EAAG2U,GACtB,IAAK,IAAIzU,EAAI,EAAGA,EAAIyU,EAAUrP,OAAQpF,IACrC2U,GAAoBF,EAAUzU,GAC1ByU,EAAUzU,GAAK,GAAKyU,EAAUzU,GAAK4U,IACtCE,EAAiBJ,EACjBE,EAAcH,EAAUzU,GACxB6U,EAAa7U,GAMZ8U,GAAuC,IAArBH,IACrBG,EAAenL,WAAW7J,EAAG2U,GAC7BA,EAAUI,IAAe,EAAIF,EAC7BG,EAAejL,WAAW/J,EAAG2U,KA1R9BO,CAAiBrU,GAIjBA,aAAgBM,aAChBN,EAAKE,cACLF,EAAK4D,iBAAiBa,QACtBzE,EAAK4D,iBAAiB,GAAInD,WAAa,MACtC,CACD,MAAMR,EAAUD,EAAKE,aACrBD,EAAQgJ,SAAS,IAAIqL,YAAYrU,EAAQ6E,cAK3C,SAASyP,EAAiBC,GACzB,MAAMzK,IAAEA,EAAFE,IAAOA,GAAQuK,EAIflB,EAAQrG,KAAKhD,KACjBA,EAAI,GAAKF,EAAI,IAAM,GACnBE,EAAI,GAAKF,EAAI,IAAM,GACnBE,EAAI,GAAKF,EAAI,IAAM,GAUrB,MAAO,CAAE0K,OANY,CACpB1K,EAAI,IAAME,EAAI,GAAKF,EAAI,IAAM,EAC7BA,EAAI,IAAME,EAAI,GAAKF,EAAI,IAAM,EAC7BA,EAAI,IAAME,EAAI,GAAKF,EAAI,IAAM,GAGbuJ,MAAAA,GAIlB,SAASoB,EAAqB5R,EAAeW,EAAYsP,GACxD,MAAM4B,EAAkBlB,GAAcV,GACtC,IAAK,MAAMhM,KAAUtD,EAAKqD,cACzB,GAAIC,aAAkB2H,OAAM,CAC3B,MAAMkG,EAAe7N,EACnBD,cACAqD,OAAQkH,GAAMA,aAAaC,oBACvBuD,EAAaD,EAAaE,KAAMjE,GAAYwB,EAAaxP,SAASgO,EAAQkE,kBAC1EC,EAAejO,EAAOyC,eAAe/E,OAAS,EAEpD,GAAIsC,EAAOyH,UAAW,CACrBzH,EAAOkO,QAAQC,EAAcnO,EAAOyH,UAAYuE,IAChD,SAGD,IAAIoC,EACAH,GAAgBH,GACnBM,EAAarS,EAAIsS,WAAW,IAAIC,QAAQ5R,GACxCsD,EAAOuO,SAASH,GAAYE,QAAQ,MACpCT,EACEzK,OAAQ0G,GAAYA,EAAQkE,kBAAoB5C,GAChD3O,QAASqN,GAAYA,EAAQ0E,cAAcJ,KAE7CA,EAAapO,EAGd,MAAMyO,EAAaL,EAAWM,YAC9BC,WAAaF,EAAYA,EAAYb,GACrCQ,EAAWQ,UAAUH,IAMxB,SAASN,EAAcU,EAAY7C,GAClC6C,EAAOA,EAAKvC,QACZ,MAAMsB,EAAkBlB,GAAcV,GAChC8C,EAAsBD,EAAKE,yBAA0BzC,QACrD0C,EAAM,GACZ,IAAK,IAAI5W,EAAI,EAAG0P,EAAQgH,EAAoBpV,WAAYtB,EAAI0P,EAAO1P,IAClE0W,EAAoB7M,WAAW7J,EAAG4W,GAClCL,WAAaK,EAAKA,EAAKpB,GACvBkB,EAAoB3M,WAAW/J,EAAG4W,GAEnC,OAAOH,EAAKI,uBAAuBH,GAWpC,SAASjC,EAAkB/N,EAAqBqN,EAA6BD,GAC5E,MAAMrK,EAAW,IAAIsK,EAAKrN,EAAUf,WAAYL,QAE1CwR,EAAWrE,EAAW/O,SAASqQ,GAAQ,EAAI,EAC3CgD,EAAYjD,EAAOgD,EACnBE,EAAuC,EAAzBjD,EAAKkD,kBAAwBH,EAE3C3C,EAAQrG,KAAKoJ,IAAI,EAAGH,GAAa,EACjCI,EAAKH,EAAcD,EACnBK,EAAK,EAAIL,EAAYC,EAE3B,IAAK,IAAIhX,EAAI,EAAGqX,EAAK,EAAGzN,EAAe,GAAI5J,EAAI0G,EAAUpF,WAAYtB,IAAK,CACzE0G,EAAUmD,WAAW7J,EAAG4J,GACxB,IAAK,IAAI1J,EAAI,EAAGA,EAAI0J,EAAGtE,OAAQpF,IAAK,CAEnC,IAAIS,EAAQmN,KAAKQ,MAAMR,KAAKwJ,IAAI1N,EAAG1J,IAAMiU,GAGzCxT,EAASA,GAASwW,EAAOxW,GAASyW,EAGlC3N,EAAS4N,KAAQ1W,EAAQmN,KAAKyJ,KAAK3N,EAAG1J,KAIxCwG,EAAUoD,SAASL,GAAUO,eAAc,GAG5C,SAASgK,EACRlL,EACApC,EACA9C,EACAJ,GAEA,MAAMoH,EAAMlE,EAAU8Q,iBAAiB,IACjC1M,EAAMpE,EAAU+Q,iBAAiB,IAEvC,IAAI3D,EACAC,EAEJ,GAAiB,aAAbjL,EACHgL,EAAOtQ,EAAQ6P,iBACfU,EAAOD,GAAQ,EAAIpB,UAAYC,mBACR,WAAb7J,GAAsC,YAAbA,EACnCgL,EAAOtQ,EAAQ8P,eACfS,EAAOD,GAAQ,EAAIpB,UAAYC,mBACrB7J,EAAS4O,WAAW,UAC9B5D,EAAOtQ,EAAQgQ,cACfO,EAAOD,GAAQ,EAAI6D,WAAaxC,oBACtBrM,EAAS4O,WAAW,aAAc,CAC5C,GAAI9M,EAAI+K,KAAMtT,GAAMA,EAAI,IAAMyI,EAAI6K,KAAMtT,GAAMA,EAAI,GAEjD,OADAuB,EAAOgU,2BAA0B9O,0BAC1B,CAAEgL,MAAO,GAEjBA,EAAOtQ,EAAQ+P,iBACfQ,EAAOD,GAAQ,EAAI6D,WAAaxC,oBACtBrM,EAAS4O,WAAW,WAM9B,OALA5D,EAAOhG,KAAKhD,OAAOpE,EAAUsH,OAAO,MAAQ,IAAM,EAAI,GACtD+F,EAAOD,GAAQ,EAAI6D,WAAaxC,YAC5BzO,EAAU6C,mBAAqBuK,EAAO,GACzCpN,EAAUoD,SAAS,IAAIiK,EAAKrN,EAAUf,aAEhC,CAAEmO,MAAO,MACNhL,EAAS4O,WAAW,YAAa,CAC3C,GAAI9M,EAAI+K,KAAMtT,GAAMA,EAAI,IAAMyI,EAAI6K,KAAMtT,GAAMA,EAAI,GAEjD,OADAuB,EAAOgU,2BAA0B9O,0BAC1B,CAAEgL,MAAO,GAEjBA,EAAOtQ,EAAQiQ,eACfM,EAAOD,GAAQ,EAAI6D,WAAaxC,qBACtBrM,EAAS4O,WAAW,KAU9B,UAAU7V,yCAAwCiH,OATlD,GAAI8B,EAAI+K,KAAMtT,GAAMA,GAAK,IAAMyI,EAAI6K,KAAMtT,GAAMA,EAAI,GAElD,OADAuB,EAAOgU,2BAA0B9O,2BAC1B,CAAEgL,MAAO,GAEjBA,EAAOtQ,EAAQkQ,gBACfK,EACIA,EADGnJ,EAAI+K,KAAMtT,GAAMA,EAAI,GAChByR,GAAQ,EAAIpB,UAAYC,WACxBmB,GAAQ,EAAI6D,WAAaxC,aAKrC,MAAO,CAAErB,KAAAA,EAAMC,KAAAA,GAGhB,SAAS8D,GAA8BvT,GACtC,MAAMwT,EAAwB,GACxBC,EAAgC,GACtC,IAAK,MAAMlX,KAAQyD,EAAKC,iBAAkB,CACzC,MAAMmC,EAAY7F,EAAKI,aAAa,YAChCyF,GAAWoR,EAAUxQ,KAAKZ,GAC9B,IAAK,MAAMjH,KAAUoB,EAAKoI,cAAe,CACxC,MAAMvC,EAAYjH,EAAOwB,aAAa,YAClCyF,GAAWqR,EAAkBzQ,KAAKZ,IAIxC,GAAyB,IAArBoR,EAAUxS,OACb,UAAUzD,iDAGX,MAAMmW,EAAOC,GAAiBH,EAAW,GAMzC,GAAIC,EAAkBzS,OAAS,EAAG,CACjC,MAAQsF,IAAKsN,EAAQpN,IAAKqN,GAAWF,GAAiBF,EAAmB,GACzEnN,MAAIoN,EAAKpN,IAAKoN,EAAKpN,IAAKA,MAAIsN,EAAQ/D,QAAM+D,EAAQA,EAAQ,GAAI,CAAC,EAAG,EAAG,KACrEpN,MAAIkN,EAAKlN,IAAKkN,EAAKlN,IAAKA,MAAIqN,EAAQhE,QAAMgE,EAAQA,EAAQ,GAAI,CAAC,EAAG,EAAG,KAGtE,OAAOH,EAIR,SAASC,GAA4B7S,EAAuBgT,GAC3D,MAAMxN,EAAgB,IAAI1E,MAAMkS,GAAaC,KAAKzK,UAC5C9C,EAAgB,IAAI5E,MAAMkS,GAAaC,MAAMzK,UAE7C0K,EAAmB,GACnBC,EAAmB,GAEzB,IAAK,MAAM7T,KAAYU,EAAW,CACjCV,EAAS8S,iBAAiBc,GAC1B5T,EAAS+S,iBAAiBc,GAC1B,IAAK,IAAIvY,EAAI,EAAGA,EAAIoY,EAAapY,IAChC4K,EAAI5K,GAAK8N,KAAKlD,IAAIA,EAAI5K,GAAIsY,EAAOtY,IACjC8K,EAAI9K,GAAK8N,KAAKhD,IAAIA,EAAI9K,GAAIuY,EAAOvY,IAInC,MAAO,CAAE4K,IAAAA,EAAKE,IAAAA,GAiBf,SAASwJ,GAAcF,GACtB,OAAOoE,+BAA6B,GAAuB,CAAC,EAAG,EAAG,EAAG,GAAIpE,EAAUkB,OAAQ,CAC1FlB,EAAUD,MACVC,EAAUD,MACVC,EAAUD,QCvZZ,MAIMsE,GAAgD,CAACC,UAAW,MAgElE,SAASC,GAAU9T,EAA2BrB,GAC7C,MAAMuB,EAAQF,EAAQG,WAAYkP,QAC5BjP,EAASJ,EAAQK,YAAagP,QAE9BwE,EAAYlV,EAAQkV,UAEpBE,EAAY7T,EAAMzD,WAAa,EAC/BuX,EAAgB,GAEtB,IAAIC,EAAa,EAEjB,IAAK,IAAI9Y,EAAI,EAAGA,EAAI4Y,IAAc5Y,EAAG,CACpC,MAAM+Y,EAAOhU,EAAMiU,UAAUhZ,GACvBiZ,EAAWlU,EAAMiU,UAAUhZ,EAAI,GAC/BkZ,EAAWnU,EAAMiU,UAAUhZ,EAAI,GAC/BmZ,GAAWJ,EAAOE,IAAaC,EAAWD,GAEhD,IAAIG,GAAO,EAGX,GAAIL,IAASG,IAAmB,IAANlZ,GAAW+Y,IAAShU,EAAMiU,UAAU,IAC7D,IAAK,IAAI9Y,EAAI,EAAGA,EAAI+E,EAAOoU,iBAAkBnZ,IAAK,CACjD,MAAMS,EAAQsE,EAAO4E,WAAW7J,EAAG6Y,GAAK3Y,GAClCoZ,EAAYrU,EAAO4E,WAAW7J,EAAI,EAAG6Y,GAAK3Y,GAC1CqZ,EAAYtU,EAAO4E,WAAW7J,EAAI,EAAG6Y,GAAK3Y,GAEhD,GAAmC,WAA/B2E,EAAQ2U,oBAEX,GAAI1L,KAAKwJ,IAAI3W,GAAa2Y,GA6Cd,GADsBvH,EA5CcoH,IAAXI,EA6CXxH,IA7CkC2G,EAAW,CACtEU,GAAO,EACP,eAEwC,SAA/BvU,EAAQ2U,qBAEd7Y,IAAU2Y,GAAa3Y,IAAU4Y,GAAW,CAC/CH,GAAO,EACP,OAOAA,IACCpZ,IAAM8Y,IACT/T,EAAM0U,UAAUX,EAAY/T,EAAMiU,UAAUhZ,IAC5CiF,EAAO8E,WAAW+O,EAAY7T,EAAO4E,WAAW7J,EAAG6Y,KAEpDC,KAwBH,IAAuC/G,EAlBlC6G,EAAY,IACf7T,EAAM0U,UAAUX,EAAY/T,EAAMiU,UAAUJ,IAC5C3T,EAAO8E,WAAW+O,EAAY7T,EAAO4E,WAAW+O,EAAWC,IAC3DC,KAIGA,IAAe/T,EAAMzD,YACxByD,EAAM+E,SAAS/E,EAAMY,WAAY+T,MAAM,EAAGZ,IAC1C7T,EAAO6E,SAAS7E,EAAOU,WAAY+T,MAAM,EAAGZ,EAAa7T,EAAOoU,mBAChExU,EAAQ8U,SAAS5U,GACjBF,EAAQ+U,UAAU3U,KAElBF,EAAM0B,UACNxB,EAAOwB,WCtIT,MAaMoT,GAA8D,CACnEpa,OAAQ,QAiFT,SAASqa,GAAepT,EAAqBqT,EAAoBC,GAChE,MAAM5B,EAAc1R,EAAU2S,iBACxBY,EAAWvT,EAAUpF,WACrBkI,EAAW9C,EAAUf,WACrB8D,EAAWD,EAASkQ,MAAM,EAAGM,EAAW5B,GAE9C,IAAK,IAAIpY,EAAI,EAAGA,EAAIia,EAAUja,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAIkY,EAAalY,IAChCuJ,EAASsQ,EAAM/Z,GAAKoY,EAAclY,GAAKsJ,EAASxJ,EAAIoY,EAAclY,GAIpEwG,EAAUoD,SAASL,GA+BpB,SAAShF,GAAe5D,GACvB,MAAMuE,EAAwB,GAE9B,IAAK,MAAMsB,KAAa7F,EAAK4D,iBAC5BW,EAAUkC,KAAKZ,GAEhB,IAAK,MAAMjH,KAAUoB,EAAKoI,cACzB,IAAK,MAAMvC,KAAajH,EAAOgF,iBAC9BW,EAAUkC,KAAKZ,GAIjB,OAAOR,MAAMC,KAAK,IAAI1D,IAAI2C,ICxJ3B,MAaM8U,GAA+C,CACpD1Z,KAAM,GACN2Z,IAAK,GACLhR,QAAS,KACT4C,MAAM,GCFDqO,GAAyE,CAC9EC,WAAW,GAwGZ,SAASC,GAAkBzZ,GAC1B,MAAMoG,EAAWpG,EAAKmI,cACtB,IAAK/B,EAAU,MAAO,aAEtB,MAAMsT,EAAoBtT,EAASuT,uBACnC,IAAKD,EAAmB,MAAO,aAE/B,MACMzR,cADWyR,EAAkBE,gBAEnC,OAAI5Z,EAAKI,aAAa6H,GAAkBA,EAEjC,aAGR,SAAS4R,GACP7Z,EACA+C,EACA+W,EACA3a,EACAqa,GAED,OAAIxZ,EAAKK,YAAcC,YAAUC,KAAKM,WAChCb,EAAKI,aAAa,aAClBJ,EAAKI,aAAa,WAClBJ,EAAKI,aAAa,cAQpBJ,EAAKI,aAAa,aAAeoZ,GACpCzW,EAAOwC,sCACyBpG,cAAc2a,2BAK3C9Z,EAAKE,eAER6C,EAAOgU,qCACyB5X,cAAc2a,yCAjB9C/W,EAAOwC,sCACyBpG,cAAc2a,qQCrFrCC,oCASI,0BAFZja,gIAtEgC,kCAG5Bka,eAAiB,wCAmBlBC,yBAEL,yCAMA,OAAOC,EAEP,uEAQ6Cpa,qCAS3C4P,oBAjDgC,eAgGnByK,uCA3FVlY,GAAO,gBAiBb,IAAYmY,IAAAA,GAAAA,8BAAAA,qDAIXA,uBAGYC,MAAAA,GAAgD,CAC5DjZ,KAAM,CAAC,KAAM,MACb+I,OAAQiQ,4BAAoBE,SAC5BhS,QAAS,MCxBJiS,GAAiC,GAyDvC,SAASC,GACPxH,EACA/S,EACA8C,EACA0X,GACD,GAAIA,EAAQpZ,IAAI2R,IAAiByH,EAAQ9Y,IAAIqR,GAAe3R,IAAIpB,GAE/D,OADA8C,EAAOwC,kDAAmDyN,EAAarJ,eAChE8Q,EAAQ9Y,IAAIqR,GAAerR,IAAI1B,GAGvC,MAAMmT,EAAeJ,EAAaK,QAC5BqH,EAAY1H,EAAalO,WAAY+I,YAE3CuF,EAAanK,SACZ,IAAIyR,EAAUza,EAAQQ,WAAauS,EAAawF,mBAGjD,MAAMzP,EAAe,GACrB,IAAK,IAAI5J,EAAI,EAAGA,EAAIc,EAAQQ,WAAYtB,IACvCiU,EAAalK,WAAW/J,EAAG6T,EAAahK,WAAW/I,EAAQkY,UAAUhZ,GAAI4J,IAM1E,OAHK0R,EAAQpZ,IAAI2R,IAAeyH,EAAQ5Y,IAAImR,EAAc,IAAI7R,KAC9DsZ,EAAQ9Y,IAAIqR,GAAenR,IAAI5B,EAASmT,GAEjCA,ECxFR,MAQMuH,GAAuC,CAAC9C,UAAW,MA0BzD,SAAS+C,GAAU9X,EAAe9C,GACjC,GAAIA,EAAKE,aAAc,OACvB,MAAMuK,EAAOzK,EAAK4D,iBAAiB,GAC7BiX,EAAcpQ,EAAKhK,WACnBqO,EAASrE,EAAKsE,YACd+L,EAAeD,GAAe,MACjC,IAAIvG,YAAwC,EAA5BvU,EAAoBC,IACpC,IAAI+a,YAAwC,EAA5Bhb,EAAoBC,IACjCC,EAAU6C,EAAImM,iBAClBE,UAAUL,GACVI,QAAQ8L,WAASC,KAAKC,QACtBjS,SAAS6R,GACX,IAAK,IAAI3b,EAAI,EAAGA,EAAIc,EAAQQ,WAAYtB,IAAKc,EAAQ2Y,UAAUzZ,EAAGA,GAClEa,EAAKmb,WAAWlb,GAOjB,SAASmb,GAActY,EAAe9C,EAAiB2C,GACtD,MAAMkV,EAAY5K,KAAKhD,IAAItH,EAAQkV,UAAWlK,OAAO0N,SAC/CC,EAAerO,KAAKsO,MAAM,EAAI1D,GAC9B2D,EAAcvO,KAAKoJ,IAAI,GAAIiF,GAE3BG,EAAuC,GACvCC,EAAa1b,EAAKE,aAClB2T,EAAc6H,EACjBA,EAAWjb,WACXT,EAAK4D,iBAAiB,GAAGnD,WAGtBkb,EAAgB,IAAIxa,IAC1BnB,EAAK4D,iBAAiBJ,QAASiH,GAASkR,EAAc9Z,IAAI4I,EAAM,KAChEzK,EAAKoI,cAAc5E,QAAS5E,IAC3BA,EAAOgF,iBAAiBJ,QAASiH,GAASkR,EAAc9Z,IAAI4I,EAAM,OAGnE,MAAMmR,EAAkB,GACxB,IAAIC,EAAY,EAIhB,IAAK,IAAI1c,EAAI,EAAGA,EAAI0U,EAAa1U,IAAK,CACrC,MAAM+G,EAAQwV,EAAaA,EAAWvD,UAAUhZ,GAAKA,EAE/C2c,EAAyB,GACzB/S,EAAe,GACrB,IAAK,MAAMlD,KAAa7F,EAAK4D,iBAC5B,IAAK,IAAIvE,EAAI,EAAGA,EAAIwG,EAAU2S,iBAAkBnZ,IAC/Cyc,EAAarV,QAAUZ,EAAUmD,WAAW9C,EAAO6C,GAAI1J,GAAKmc,IAI9D,MAAMO,EAAOD,EAAalV,KAAK,KAC/B,GAAImV,KAAQN,EACXG,EAAgBnV,KAAKgV,EAAYM,QAC3B,CACN,IAAK,MAAMtR,KAAQzK,EAAK4D,iBACvB+X,EAAcha,IAAI8I,GAAOhE,KAAKgE,EAAKzB,WAAW9C,EAAO,KAEtD,IAAK,MAAMtH,KAAUoB,EAAKoI,cACzB,IAAK,MAAMqC,KAAQ7L,EAAOgF,iBACzB+X,EAAcha,IAAI8I,GAAOhE,KAAKgE,EAAKzB,WAAW9C,EAAO,KAIvDuV,EAAYM,GAAQF,EACpBD,EAAgBnV,KAAKoV,GACrBA,KAIF,MAAMG,EAAiBhc,EAAK4D,iBAAiB,GAAGnD,WAC1Cwb,EAAiBN,EAAcha,IAAI3B,EAAKI,aAAa,aAAeqE,OAC1E3B,EAAIE,YAAYuC,eAAkByW,OAAoBC,eAGtD,IAAK,MAAMC,KAAWlc,EAAK4D,iBAC1BuY,GAAenc,EAAMkc,EAASP,EAAcha,IAAIua,IAGX,IAAjCA,EAAQpV,cAAcrC,QAAcyX,EAAQtW,UAEjD,IAAK,MAAMhH,KAAUoB,EAAKoI,cACzB,IAAK,MAAM8T,KAAWtd,EAAOgF,iBAC5BuY,GAAevd,EAAQsd,EAASP,EAAcha,IAAIua,IAGb,IAAjCA,EAAQpV,cAAcrC,QAAcyX,EAAQtW,UAGlD,GAAI8V,EAAY,CACf,MAAMU,EACHC,GAAkBX,EAAW5W,WAAa8W,EAAgBnX,QAC7D2X,EAAqBva,IAAI+Z,GACzB5b,EAAKmb,WAAWO,EAAWrI,QAAQpK,SAASmT,IAGJ,IAApCV,EAAW5U,cAAcrC,QAAciX,EAAW9V,cAChD,CACN,MAAMkV,EAAekB,GAAkB,MACpC,IAAI1H,YAAYsH,GAChB,IAAIb,YAAYa,GACnB5b,EAAKmb,WAAWrY,EAAImM,iBAAiBhG,SAAS6R,KAKhD,SAASuB,GAAwCzO,EAAUnJ,GAE1D,WAAWiW,EADO9M,EAAMC,aACHpJ,GAItB,SAAS0X,GACPpV,EACAmV,EACAI,GACD,MAAMC,EAAqBD,EAAgB7X,OAASyX,EAAQ1D,iBACtDgE,EAAeH,GAAkBH,EAAQpX,WAAayX,GACtDE,EAAUP,EAAQ7I,QAAQpK,SAASuT,GAEzC,IAAK,IAAIrd,EAAI,EAAGA,EAAImd,EAAgB7X,OAAQtF,IAC3Csd,EAAQvT,WAAW/J,EAAGmd,EAAgBnd,IAGvC4H,EAAOpB,KAAKuW,EAASO,kLhB5IE/Z,EAA0BX,GACjD,MAAMY,EAAU,IAAIZ,KAAoBW,GAExC,OAAOhD,EAvBK,SAuBkBoD,IAC7B,MAAMC,EAASD,EAAIE,YACb+C,EAAOjD,EAAIQ,UACXuR,EAAa9O,EAAKhC,iBAAiBU,OAAS,GAAKsB,EAAK2K,YAAYjM,OAAS,EAEjF3B,EAAIQ,UAAU8F,aAAa5F,QAAQ,CAAC+F,EAAOrD,KAG1C,IAAIlE,EACJ,GAHAe,EAAOwC,uBAAwBW,EAAQ,OAAOH,EAAKqD,aAAa3E,WAGnC,iBAAlB9B,EAAQX,MAAoB,CACtC,MAAMmV,EAAOzN,SAAOH,GACpBvH,EAAQ,EACNmV,EAAKlN,IAAI,GAAKkN,EAAKpN,IAAI,IAAM,EAAIoN,EAAKpN,IAAI,IAC1CoN,EAAKlN,IAAI,GAAKkN,EAAKpN,IAAI,IAAM,EAAIoN,EAAKpN,IAAI,IAC1CoN,EAAKlN,IAAI,GAAKkN,EAAKpN,IAAI,IAAM,EAAIoN,EAAKpN,IAAI,IAEtB,UAAlBpH,EAAQX,QAAmBA,EAAM,GAAKmV,EAAKlN,IAAI,IAC7B,UAAlBtH,EAAQX,QAAmBA,EAAM,GAAKmV,EAAKpN,IAAI,SAEnD/H,EAAQW,EAAQX,MAGjBe,EAAOwC,wBAAyBvD,EAAM4E,KAAK,WAE3C,MAAM6N,EAAe,EAAE,EAAIzS,EAAM,IAAK,EAAIA,EAAM,IAAK,EAAIA,EAAM,IAE/D,GAAI6S,EAAY,CACf9R,EAAOwC,0EACP,MAAMmX,EAAa5Z,EAAIsS,WAAW,SAASuH,eAAelI,GAC1DlL,EAAMC,eAAehG,QAASkI,GAAUgR,EAAWpH,SAAS5J,IAC5DnC,EAAM+L,SAASoH,QAEf3Z,EAAOwC,8DACPgE,EAAMC,eAAehG,QAASkI,IAC7B,MAAMwF,EAAIxF,EAAMkR,iBAChBlR,EAAMiR,eAAe,CACpBzL,EAAE,GAAKuD,EAAO,GACdvD,EAAE,GAAKuD,EAAO,GACdvD,EAAE,GAAKuD,EAAO,SAMlB1R,EAAOwC,0DCvDmB5C,GAE3B,OAAOjD,EAAgBuC,EAAOa,IAE7B,MAAMC,EAASD,EAAIE,YAEnB,GAA8B,WAA1BL,EAAQka,cAEX,YADA9Z,EAAOoO,QAAQlP,yDAIhB,GAA8B,SAA1BU,EAAQka,cAKX,YAJA9Z,EAAO+Z,SACH7a,8BAAiCU,EAAQka,uEAM9C,MAAME,EAAY,IAAInb,IAGtB,SAASob,EAAcC,GAEtB,OAASA,EAAI,OACN,YAAJA,EACAhQ,KAAKoJ,IAAS,YAAJ4G,EAAmB,YAAc,KAI/C,SAASC,EAAgBvZ,GACxB,MAAMwZ,EAAQ,CAAC,EAAG,EAAG,GACrB,IAAItX,EACJ,IAAK,IAAI1G,EAAI,EAAI0G,EAAYlC,EAAUvD,sBAAsBjB,KAAOA,IACnE,IAAI4d,EAAU1b,IAAIwE,GAAlB,CAEA,IAAK,IAAIxG,EAAI,EAAGA,EAAIwG,EAAUpF,WAAYpB,IACzCwG,EAAUmD,WAAW3J,EAAG8d,GACxBA,EAAM,GAAKH,EAAaG,EAAM,IAC9BA,EAAM,GAAKH,EAAaG,EAAM,IAC9BA,EAAM,GAAKH,EAAaG,EAAM,IAC9BtX,EAAUqD,WAAW7J,EAAG8d,GAGzBJ,EAAUxb,IAAIsE,IAIhB/C,EAAIQ,UACFC,aACAC,QAASC,GAASA,EAAKC,iBAAiBF,QAAQ0Z,IAElDna,EAAOwC,SAAStD,+DE5CSS,EAA8B2F,GACxD,MAAM1F,EAAU,IAAI0F,KAAwB3F,GAE5C,OAAOhD,EAvBK,aAuBkBoD,IAC7B,MAAMC,EAASD,EAAIE,YACnB,IAAK,MAAMS,KAAQX,EAAIQ,UAAUC,aAChC,IAAK,MAAMvD,KAAQyD,EAAKC,iBACvB6E,EAAoBvI,EAAM2C,GAG5BG,EAAIsa,gBAAgBC,oBAAkBzX,UACtC7C,EAAOwC,2DC/BgBzC,GACxB,MAAO,CACNwa,OAAQlU,EAAWtG,GACnBO,OAAQE,EAAWT,GACnBgF,UAAW3B,EAAcrD,GACzBoE,SAAUC,EAAarE,GACvB0O,WAAYzN,EAAejB,+BCKHJ,EAA4BsL,GAIrD,OAAOtO,EAfK,WAekBoD,IAC7B,MAAMC,EAASD,EAAIE,YACb+C,EAAOjD,EAAIQ,UACXsL,EAAiB9L,EAAIsa,gBAAgBG,qBAE3C,GAAIxX,EAAKhC,iBAAiBU,OACzB,UAAUzD,8EAGX,IAAIwc,EAAa,EACbC,EAAe,EAEnB,IAAK,MAAMlU,KAASxD,EAAKqD,aAAc,CAEtC,MAAMsU,EAAgB,IAAIvc,IAC1BoI,EAAMoU,SAAUxP,IACf,MAAM1K,EAAO0K,EAAKI,UACb9K,GACLia,EAAc7b,IAAI4B,GAAOia,EAAc/b,IAAI8B,IAAS,IAAI7B,KAAaL,IAAI4M,MAI1E,MAAMyP,EAAgB,GACtB,IAAK,MAAMna,KAAQ4B,MAAMC,KAAKoY,EAAc5b,QAAS,CACpD,MAAMoM,EAAQ7I,MAAMC,KAAKoY,EAAc/b,IAAI8B,IAC3C,GAAIyK,EAAMzJ,OAAS,EAAG,SACtB,GAAIyJ,EAAM4G,KAAM3G,GAASA,EAAKK,WAAY,SAE1C,MAAMqP,EAAQlP,EAAY7L,EAAK8L,EAAgBnL,EAAMyK,EAAMzJ,QACrDuK,EAAmB6O,EAAMzd,aAAa,eACtCgP,EAAgByO,EAAMzd,aAAa,YACnCiP,EAAawO,EAAMzd,aAAa,SAEhC0d,EAAYhb,EAAIsS,aACpBC,QAAQ5R,GACRsa,aAAa,0BAA2BF,GAC1CtU,EAAM+L,SAASwI,GAEf,IAAIE,GAAmB,EACnBC,GAAgB,EAChBC,GAAa,EAGjB,IAAK,IAAI/e,EAAI,EAAGA,EAAI+O,EAAMzJ,OAAQtF,IAAK,CACtC,IAAI+R,EAASiN,EAAS1O,EACtB,MAAMtB,EAAOD,EAAM/O,GAEnB6P,EAAiB9F,WAAW/J,EAAG+R,EAAI/C,EAAKiQ,uBACxChP,EAAclG,WAAW/J,EAAGgf,EAAIhQ,EAAKkQ,oBACrChP,EAAWnG,WAAW/J,EAAGsQ,EAAItB,EAAKmQ,iBAE7BC,YAAUC,GAAGtN,EAAG,CAAC,EAAG,EAAG,MAAK8M,GAAmB,GAC/CO,YAAUC,GAAGL,EAAG,CAAC,EAAG,EAAG,EAAG,MAAKF,GAAgB,GAC/CM,YAAUC,GAAG/O,EAAG,CAAC,EAAG,EAAG,MAAKyO,GAAa,GAG9C/P,EAAKkH,QAAQ,MACbuI,EAAcnX,KAAK0H,GAGf6P,GAAkBhP,EAAiBpJ,UACnCqY,GAAe7O,EAAcxJ,UAC7BsY,GAAY7O,EAAWzJ,UAE5BqI,EAAiB2P,EAAe7a,GAEhCya,IACAC,GAAgBvP,EAAMzJ,QAIpB+Y,EAAa,EAChBza,EAAOoO,0BACcqM,mBAA4BC,uBAGjD1a,EAAOoO,mEACPvC,EAAehJ,WAGhB7C,EAAOwC,4DChFmB7C,EAA8BkN,GAIzD,OAAOlQ,EAnBK,sBAmBwBoD,oBAuFnC2b,EAAmB7Y,UAGnB,IAAK,MAAM8Y,KAAOC,EACbD,GAAoC,IAA7BA,EAAI5X,cAAcrC,QAAcia,EAAI9Y,UAGhD7C,EAAOwC,+BA5FP,MAAMxC,EAASD,EAAIE,YAGnB,IADuBF,EAAIQ,UAAUsb,qBAAqBtV,IAAKuV,GAAQA,EAAIC,eACvDjc,SAAS,uCAE5B,OADAE,EAAOgU,iGAIR,MAAMgI,EAAejc,EAAIsa,gBAAgB4B,gBACnCC,EAAgBnc,EAAIsa,gBAAgB8B,qBACpCT,EAAqB3b,EAAIsa,gBAAgB+B,kCAEzCR,EAAgB,IAAI/c,ovBAEHkB,EAAIQ,UAAU6C,yBAA1BC,gBAmEVA,EAAS2X,aAAa,sCAAuC,MAlE7D,MAAMqB,EAAYhZ,EAChBiZ,aAAoC,uCACtC,IAAKD,SAGL,MAAME,EAAWL,EAAcM,iBAC7BC,kBAAkB,GAClBC,uBAAuBL,EAAUM,qBAGnCf,EAAcpd,IAAI6d,EAAUO,gCAC5BhB,EAAcpd,IAAI6E,EAASwZ,uBAC3BjB,EAAcpd,IAAI6E,EAASyZ,+BAO3BzZ,EACE0Z,mBAAmBV,EAAUW,oBAC7BC,kBAAkB,GAClBC,mBAAmB,GACnBlC,aAAa,oBAAqBgB,EAAamB,YAAYC,OAAO,MAClEpC,aAAa,yBAA0BuB,GAGzC,MAAMc,EAAiBhB,EAAUiB,oBAC7BD,IACHha,EAASka,oBAAoBF,GAC7Bha,EAASma,0BAA2BC,KAAKpB,EAAUqB,0BAIpD,MAAMC,EAAYtB,EAAUO,+CACxBe,GAEH,MAAMC,EAAgBvB,EAAUwB,mCAC1BC,EAAkB/d,EAAIge,gBAvCwB,uBAwC9CpiB,EAAegiB,EAAWG,EAAiB,CAAC3hB,EAAQC,EAAGE,KAC5DH,EAAO2C,IAAI1C,EAAGE,EAAG,EAAG,wBAErBigB,EAASyB,mBAAmBF,GAC5BvB,EAAS0B,wBAAwBH,GACjCvB,EAAS2B,yBAA0BT,KAAKG,GACxCrB,EAAS4B,8BAA+BV,KAAKG,GAG7C,MAAMQ,EAAmB/B,EAAUgC,sBAC7BC,EAAoBve,EAAIge,gBAlDsB,uBAmD9CpiB,EAAegiB,EAAWW,EAAmB,CAACniB,EAAQC,EAAGE,KAE9D,MAAMiiB,EAAY,IAAMrU,KAAKQ,MAAMvO,EAAOyC,IAAIxC,EAAGE,EAAG,GAAK8hB,GACzDjiB,EAAO2C,IAAI1C,EAAGE,EAAG,EAAG,GACpBH,EAAO2C,IAAI1C,EAAGE,EAAG,EAAGiiB,GACpBpiB,EAAO2C,IAAI1C,EAAGE,EAAG,EAAG,GACpBH,EAAO2C,IAAI1C,EAAGE,EAAG,EAAG,wBAErB+G,EAASmb,4BAA4BF,GACrCjb,EAASob,kCAAmChB,KAAKG,OAEjDrB,EAASG,uBAAuBL,EAAUM,qBAC1CtZ,EAAS6Z,mBAAmB,EAAIb,EAAUgC,2GA/EvB,wDEQL,CAAC1e,EAA6B6O,KAE/C,MAAM5O,EAAU,IAAI4O,KAAuB7O,GAE3C,OAAOhD,EA/BK,qBA+BwBoD,OACnC,MAAMC,EAASD,EAAIE,mBAEI,IAAnBL,EAAQU,QAcd,SAA0BP,EAAeC,EAAgBJ,GACxD,MAAM8e,EAAe,IAAI7f,IAAYkB,EAAIQ,UAAU0N,cAAc1H,IAAKvE,GAAMA,EAAE0H,WAE9E3J,EAAIQ,UAAUC,aACZC,QAAQ,CAACC,EAAMie,KACf,GAAIrc,MAAMsc,QAAQhf,EAAQU,UAAYV,EAAQU,OAAOR,SAASY,EAAKkG,WAIlE,YAHA5G,EAAOwC,mCACqBmc,gBAAwBje,EAAKkG,eAK1D5G,EAAOwC,8CAA4C9B,EAAKkG,eAExD,MAAMmF,EAAShM,EAAI8e,aAAane,EAAKkG,WACnCkY,OAAOpQ,EAAgBhO,EAAKkG,WAAa,OAAQ8X,IAEnDhe,EAAKC,iBACHF,QAASG,IACT,MAAM1D,EAAU0D,EAAUzD,aACtBD,GAASA,EAAQkP,UAAUL,GAC/BnL,EAAUC,iBACRJ,QAASqC,GAAcA,EAAUsJ,UAAUL,IAC7CnL,EAAUyE,cACR5E,QAASse,IACTA,EAAWle,iBACTJ,QAASqC,GAAcA,EAAUsJ,UAAUL,UAxCpBiT,CAAgBjf,EAAKC,EAAQJ,IAChC,IAAvBA,EAAQ6O,YA6Cd,SAA8B1O,EAAeC,EAAgBJ,GAC5D,MAAM8e,EAAe,IAAI7f,IAAYkB,EAAIQ,UAAU0N,cAAc1H,IAAKvE,GAAMA,EAAE0H,WAE9E3J,EAAIQ,UAAUS,iBACZP,QAAQ,CAACqJ,EAAMmV,KACf,GAAI3c,MAAMsc,QAAQhf,EAAQ6O,cAAgB7O,EAAQ6O,WAAW3O,SAASgK,EAAKlD,WAI1E,YAHA5G,EAAOwC,wCAC0Byc,gBAAwBnV,EAAKlD,eAK/D5G,EAAOwC,mDAAiDsH,EAAKlD,eAE7D,MAAMmF,EAAShM,EAAI8e,aAAa/U,EAAKlD,WACnCkY,OAAOpQ,EAAgB5E,EAAKlD,WAAa,YAAa8X,IAExD5U,EAAK5I,eACHT,QAASQ,IACT,MAAME,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAAOA,EAAMiL,UAAUL,GACvB1K,GAAQA,EAAO+K,UAAUL,OAnEEmT,CAAoBnf,EAAKC,EAAQJ,GAE9DA,EAAQU,QAAWV,EAAQ6O,YAC/BzO,EAAOgU,sFAGFjU,EAAIyQ,UAAUlD,EAAM,CAAClO,cAAe,CAACC,eAAagO,4BAExDrN,EAAOwC,gCAZc,uEC6CN,CAAC7C,EAA4B4P,KAC7C,MAAM3P,EAAU,IAAK2P,KAAsB5P,GAE3C,OAAOhD,EA1DK,oBA0DwBoD,OACnC,MAAMC,EAASD,EAAIE,YACb+C,EAAOjD,EAAIQ,UAKjB,IAAIyP,EAHJjQ,EAAIsa,gBAAgBC,oBAAkB6E,aAAY,GAIf,UAA/Bvf,EAAQ4P,qBACXQ,EAAgBwB,EA4SnB,SAAsB4N,GACrB,MAAMjI,EAASiI,EAAO,GACtB,IAAK,MAAMhL,KAAQgL,EAClBpY,MAAImQ,EAAOnQ,IAAKmQ,EAAOnQ,IAAKoN,EAAKpN,KACjCE,MAAIiQ,EAAOjQ,IAAKiQ,EAAOjQ,IAAKkN,EAAKlN,KAElC,OAAOiQ,EAlT4BkI,CAAarc,EAAKxC,aAAa+F,IAAI0N,OAIrE,IAAK,MAAMvT,KAAQX,EAAIQ,UAAUC,aAAc,CACX,SAA/BZ,EAAQ4P,qBACXQ,EAAgBwB,EAAiByC,GAA8BvT,KAG5DsP,GAAiBpQ,EAAQ2F,QAAQG,KAAK,aACzCiM,EAAqB5R,EAAKW,EAAMsP,GAGjC,IAAK,MAAM/S,KAAQyD,EAAKC,iBAAkB,CACzCoP,EAAkBhQ,EAAK9C,EAAM+S,EAAgBpQ,GAC7C,IAAK,MAAM/D,KAAUoB,EAAKoI,cACzB0K,EAAkBhQ,EAAKlE,EAAQmU,EAAgBpQ,2BAK5CG,EAAIyQ,UACTlD,EAAM,CAAElO,cAAe,CAACC,eAAaC,SAAUD,eAAa2N,QAC5DtN,EAAM,CAAEN,cAAe,CAACC,eAAaC,8BAGtCU,EAAOwC,+BAnCc,+DEvCE7C,EAA2BsW,IACnD,MAAMrW,EAAU,IAAIqW,MAAqBtW,GACnC2f,EAAU1f,EAAQ0f,QAExB,OAAO3iB,EA3CK,mBA2CwBoD,OACnC,MAAMC,EAASD,EAAIE,mCAEbqf,EAAQC,uBAEd,MAAMC,EAoER,SAA8Bzf,GAC7B,MAAM0f,EAAsB,IAAIvhB,EAC1BwhB,EAAgB,IAAIthB,IACpBuhB,EAAyB,IAAIzhB,EAEnC,IAAK,MAAMwC,KAAQX,EAAIQ,UAAUC,aAChC,IAAK,MAAMvD,KAAQyD,EAAKC,iBAAkB,CACzC,MAAMzD,EAAUD,EAAKE,aACrB,GAAKD,EAAL,CAEAwiB,EAAc5gB,IAAI5B,EAASD,EAAKK,WAEhC,IAAK,MAAMwF,KAAajC,GAAe5D,GACtCwiB,EAAoBjhB,IAAItB,EAAS4F,GACjC6c,EAAuBnhB,IAAIsE,EAAW7F,IAKzC,MAAO,CAACwiB,oBAAAA,EAAqBC,cAAAA,EAAeC,uBAAAA,GAvF9BC,CAAqB7f,GAElC,IAAK,MAAM4Y,KAAc6G,EAAKC,oBAAoB1gB,OAAQ,CACzD,MAAM8gB,EAAalH,EAAWrI,QAC9B,IAAIyH,EAAe8H,EAAW9d,WAAY+T,QACpCiC,aAAwBC,cAC7BD,EAAe,IAAIC,YAAYD,IAIhC,MAAO5B,EAAO2J,GAAUR,EAAQS,YAC/BhI,EACAyH,EAAKE,cAAc9gB,IAAI+Z,KAAgBpb,YAAUC,KAAKM,UACnC,SAAnB8B,EAAQ/D,QAGTgkB,EAAW3Z,SAAS4Z,GAAU,MAAQ,IAAIvO,YAAYwG,GAAgBA,GAGtE,IAAK,MAAM9H,KAAgBuP,EAAKC,oBAAoB7gB,IAAI+Z,GAAa,CACpE,MAAMtI,EAAeJ,EAAaK,QAClC4F,GAAe7F,EAAc8F,EAAO2J,GACpC,IAAK,MAAM7iB,KAAQuiB,EAAKG,uBAAuB/gB,IAAIqR,GAIlD,GAHIhT,EAAKE,eAAiBwb,GACzB1b,EAAK2F,KAAK+V,EAAYkH,GAEnB5iB,EAAKE,eAAiB0iB,EAAY,CACrC5iB,EAAK2F,KAAKqN,EAAcI,GACxB,IAAK,MAAMxU,KAAUoB,EAAKoI,cACzBxJ,EAAO+G,KAAKqN,EAAcI,4BAQzBtQ,EAAIyQ,UAAUlD,EAAM,CAAClO,cAAe,CAACC,eAAaC,8BAEnDkgB,EAAKC,oBAAoBphB,KAG7B2B,EAAOwC,4BAFPxC,EAAOgU,6EA7Ca,uDDhCC,CAACrU,EAA4BkV,MAEpD,MAAMjV,EAAU,IAAIiV,MAAsBlV,GAE1C,OAAOhD,EAjBK,WAiBiB,CAACoD,EAAeigB,KAC5C,MAAMC,EAAmB,IAAIphB,IACvBqhB,EAAqBngB,EAAIQ,UAAU2C,gBAAgBxB,OACnD1B,EAASD,EAAIE,YAEnB,IAAIkgB,GAAsB,EAE1B,IAAK,MAAMpf,KAAahB,EAAIQ,UAAUS,iBAAkB,CAEvD,MAAMof,EAAsB,IAAIvhB,IAChC,IAAK,MAAMiP,KAAW/M,EAAUwJ,eAC3BuD,EAAQuS,cAA4C,YAA5BvS,EAAQkE,iBACnCoO,EAAoB5hB,IAAIsP,EAAQuS,cAIlC,IAAK,MAAMpf,KAAWF,EAAUG,eAC3Bkf,EAAoB9hB,IAAI2C,GAC3Bkf,GAAsB,EAGY,SAA/Blf,EAAQ2U,oBACuB,WAA/B3U,EAAQ2U,qBACXqK,EAAiBzhB,IAAIyC,EAAQG,YAC7B6e,EAAiBzhB,IAAIyC,EAAQK,aAC7ByT,GAAS9T,EAASrB,IAKrB,IAAK,MAAMkB,KAAYwB,MAAMC,KAAK0d,EAAiBK,UACrCxf,EAASiD,cAAcgO,KAAMzD,KAAQA,aAAazJ,UACpD/D,EAAS+B,UAGjB9C,EAAIQ,UAAU2C,gBAAgBxB,OAASwe,aXzCVF,EAAuCO,EAAiBC,GAC1F,QAAKR,GACgBA,EAAQS,MAAMC,YWuC4DxhB,YXtC1E8gB,EAAQS,MAAMC,YWsCkE,SAAlCC,CAAmBX,IACpFhgB,EAAOgU,gJAMJmM,GACHngB,EAAOgU,gFAGRhU,EAAOwC,0DExCiB7C,EAA4B2W,IACrD,MAAM1W,EAAU,IAAI0W,MAAsB3W,GAE1C,OAAOhD,EA1BK,WA0BkBoD,IAE7B,MAAMC,EAASD,EAAIE,YACb+C,EAAOjD,EAAIQ,UACXgW,EAAM3W,EAAQ2W,IAGdqK,EAAgB5d,EAAKyK,YACzBrG,OAAQgE,GAASA,EAAKxE,UAAUia,MAAMjhB,EAAQ2F,UAG5C3F,EAAQuI,MACXyY,EAAczY,KAAK,CAACxG,EAAGK,IAAML,EAAEiF,UAAY5E,EAAE4E,UAAY,GAAK,GAI/D,MAAMkD,EAAO/J,EAAI+gB,gBAAgBlhB,EAAQhD,MACnCmkB,EAAa/d,EAAKiL,cAAc,GACtC2S,EAAcngB,QAAQ,CAAC2K,EAAMhP,KAE5B,IAAI4kB,EACAC,EACM,IAAN7kB,GACH4kB,EAAa,CAAC5kB,EAAIma,GAAMna,EAAI,GAAKma,GACjC0K,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACpB7kB,IAAMwkB,EAAclf,OAAS,GACvCsf,EAAa,EAAE5kB,EAAI,GAAKma,EAAKna,EAAIma,GACjC0K,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAE9BD,EAAa,EAAE5kB,EAAI,GAAKma,EAAKna,EAAIma,GAAMna,EAAI,GAAKma,GAChD0K,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxC,MAAM9f,EAAQpB,EAAImM,iBAChBhG,SAAS,IAAIJ,aAAakb,IAC1B5U,UAAU2U,GACN1f,EAAStB,EAAImM,iBACjBhG,SAAS,IAAIJ,aAAamb,IAC1B7U,UAAU2U,GACV5U,QAAQ8L,WAASC,KAAKgJ,MAClBjgB,EAAUlB,EAAIohB,yBAClBC,iBAAiBC,mBAAiBC,cAAcC,MAChDxL,SAAS5U,GACT6U,UAAU3U,GACNyM,EAAU/N,EAAIyhB,yBAClBhP,cAAcpH,GACdqW,cAAclT,mBAAiBc,WAAWF,OAC1CuS,WAAWzgB,GACb6I,EAAK6X,WAAW1gB,GAAS2gB,WAAW9T,KAGrC9N,EAAOwC,0DC3CiB7C,EAA4B6W,IACrD,IAAK7W,EAASkiB,iBACb,UAAU5jB,8EAGX,MAAM2B,EAAU,IAAI4W,MAAsB7W,GAE1C,OAAOhD,EA1CK,WA0CkBoD,IAC7B,MAAMC,EAASD,EAAIE,YACb6hB,EAAe,IAAI1jB,IACnB2jB,EAAe,IAAI3jB,IACzB,IAAI4jB,EAAW,EAEf,IAAK,MAAMthB,KAAQX,EAAIQ,UAAUC,aAAc,CAC9C,MAAMuW,EAAWrW,EAAKkG,UAChBqb,EAAiBvhB,EAAKC,iBAE5B,IAAK,IAAIvE,EAAI,EAAGA,EAAI6lB,EAAevgB,OAAQtF,IAAK,CAC/C,MAAMa,EAAOglB,EAAe7lB,GAG5B,IAAK0a,GAAgB7Z,EAAM+C,EAAQ+W,EAAU3a,EAAGwD,EAAQ6W,WAAY,SAEpE,MAAMyL,EAAmBxL,GAAkBzZ,GAGrCG,EAAWH,EAAKI,aAAa,YAAa0E,WAC1CogB,EAASllB,EAAKI,aAAa,UAAW0E,WACtCqgB,EAAWnlB,EAAKI,aAAa6kB,GAAmBngB,WAGhDsgB,EAAaP,EAAaljB,IAAIxB,IAAaklB,SACjDR,EAAahjB,IAAI1B,EAAUilB,GAE3B,MAAME,EAAWT,EAAaljB,IAAIujB,IAAWG,SAC7CR,EAAahjB,IAAIqjB,EAAQI,GAEzB,MAAMC,EAAaV,EAAaljB,IAAIwjB,IAAaE,SACjDR,EAAahjB,IAAIsjB,EAAUI,GAG3B,MAAMC,EAAcxlB,EAAKI,aAAa,WAClColB,GAAoD,IAArCA,EAAY1e,cAAcrC,QAAc+gB,EAAY5f,UAGvE,MAAM6f,KAAmBL,KAAcE,KAAYC,IACnD,IAAIG,EAAUZ,EAAanjB,IAAI8jB,GAC/B,GAAIC,EAAS,CACZ3iB,EAAOwC,6CAA4CpG,cAAc2a,OACjE9Z,EAAKuP,aAAa,UAAWmW,GAC7BX,IACA,SAIDhiB,EAAOwC,4CAA2CpG,cAAc2a,OAChE,MAAM6L,EAAgB3lB,EAAKI,aAAa,YAAa2O,YAC/C6W,EAAejjB,EAAQiiB,iBAC5BzkB,aAAoB0I,aAAe1I,EAAW,IAAI0I,aAAa1I,GAC/D+kB,aAAkBrc,aAAeqc,EAAS,IAAIrc,aAAaqc,GAC3DC,aAAoBtc,aAAesc,EAAW,IAAItc,aAAasc,IAIhE,IAAK,IAAIhmB,EAAI,EAAGA,EAAIymB,EAAanhB,OAAQtF,GAAK,EAAGymB,EAAazmB,KAAO,EAErEumB,EAAU5iB,EAAImM,iBACZE,UAAUwW,GACV1c,SAAS2c,GACT1W,QAAQ,QACVlP,EAAKuP,aAAa,UAAWmW,GAE7BZ,EAAajjB,IAAI4jB,EAAeC,GAChCX,KAIGA,EAGJhiB,EAAOwC,6BAFPxC,EAAOgU,sGC5EoBrU,EAAiC2X,IAC9D,MAAM1X,EAAU,IAAI0X,MAA4B3X,GAEhD,OAAOhD,EAAgBuC,YAAaa,2BA+DnCC,EAAOwC,SAAStD,iBA7DhB,MAAMc,EAASD,EAAIE,kyBAEGF,EAAIQ,UAAU6D,wBAAzBgF,GACV,MAAMxM,EAAOwM,EAAQxC,UACf6C,EAAML,EAAQM,SAIpB,GAHe9J,EAAQ2F,UACnB3F,EAAQ2F,QAAQG,KAAK9I,KACrBgD,EAAQ2F,QAAQG,KAAK+D,UAGzB,GAA8B,cAA1BL,EAAQlN,eAA2D,eAA1BkN,EAAQlN,cAAgC,YACpF8D,EAAOgU,4CAA4C5K,EAAQlN,mBAI5D,MAAO4mB,EAAUC,GAAanjB,EAAQvB,MAC/B2kB,EAAUC,GAAa7Z,EAAQ5E,UAEtC,GAAIwe,GAAYF,GAAYG,GAAaF,EAAW,YACnD/iB,EAAOwC,SAAStD,iBAAmBuK,GAAO7M,0BAI3C,IAAIsmB,EAAWF,EACXG,EAAYF,EAEZC,EAAWJ,IACdK,EAAYjZ,KAAKkZ,MAAMD,GAAaL,EAAWI,IAC/CA,EAAWJ,GAGRK,EAAYJ,IACfG,EAAWhZ,KAAKkZ,MAAMF,GAAYH,EAAYI,IAC9CA,EAAYJ,GAGb,MAAMhnB,EAAWqN,EAAQpN,WAlC0B,uBAmC3BC,YAAUF,EAAUqN,EAAQlN,8BAA9CmnB,GACN,MAAMC,EAAYC,UACjB,IAAIxP,WAAWmP,EAAWC,EAAY,GAAI,CAACD,EAAUC,EAAW,IAGjEnjB,EAAOwC,SACHtD,iBAAmBuK,GAAO7M,OAAUymB,EAAUhnB,WAAWinB,EAAUjnB,YAGvE,IACCuD,EAAQwH,SAAWiQ,4BAAoBE,SACpCiM,WAASH,EAAWC,GACpBG,WAASJ,EAAWC,GACtB,MAAO3W,GACR,GAAIA,aAAa1O,MAAO,YACvB+B,EAAOgU,QAAQ9U,yBAA2BuK,GAAO7M,QAAW+P,EAAE+W,aAG/D,MAAM/W,EArD4C,QAwDnDvD,EAAQ3M,gCAAeF,aAAW+mB,EAAWla,EAAQlN,iCAArDynB,OAAAva,gFA5DoB,8DCzBCzJ,EAA0B6X,IAIjD,OAAO7a,EAnBK,SAmBkBoD,IAE7B,MAAMC,EAASD,EAAIE,YACbyX,EAAU,IAAItZ,IAEpB,IAAK,MAAMsC,KAAQX,EAAIQ,UAAUC,aAChC,IAAK,MAAMvD,KAAQyD,EAAKC,iBAAkB,CACzC,MAAMzD,EAAUD,EAAKE,aACrB,GAAKD,EAAL,CAGA,IAAK,MAAM+S,KAAgBhT,EAAK4D,iBAC/B5D,EAAK2F,KACJqN,EACAwH,GAAgBxH,EAAc/S,EAAS8C,EAAQ0X,IAIN,IAAtCzH,EAAalM,cAAcrC,QAAcuO,EAAapN,UAI3D,IAAK,MAAMhH,KAAUoB,EAAKoI,cACzB,IAAK,MAAM4K,KAAgBpU,EAAOgF,iBACjChF,EAAO+G,KACNqN,EACAwH,GAAgBxH,EAAc/S,EAAS8C,EAAQ0X,IAIN,IAAtCzH,EAAalM,cAAcrC,QAAcuO,EAAapN,UAK5D5F,EAAKmb,WAAW,MACqB,IAAjClb,EAAQ6G,cAAcrC,QAAcxE,EAAQ2F,WAIlD7C,EAAOwC,oDC9Ca7C,EAAwBiY,IAC7C,MAAMhY,EAAU,IAAIgY,MAAkBjY,GAEtC,OAAOhD,EAhBK,OAgBkBoD,IAC7B,MAAMC,EAASD,EAAIE,YAEnB,IAAK,MAAMS,KAAQX,EAAIQ,UAAUC,aAChC,IAAK,MAAMvD,KAAQyD,EAAKC,iBACG,IAAtBf,EAAQkV,UACX+C,GAAS9X,EAAK9C,GAEdob,GAAatY,EAAK9C,EAAM2C,GAK3BI,EAAOwC"}